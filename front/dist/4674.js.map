{"version":3,"file":"4674.js","mappings":"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","sources":["webpack://brojoon/./components/ChannelForm/style.ts","webpack://brojoon/./components/ChannelForm/index.tsx","webpack://brojoon/./components/ChannelLeftDrawBar/style.ts","webpack://brojoon/./components/ChannelLeftDrawBar/index.tsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport FormControl from '@mui/material/FormControl';\nimport Button from '@mui/material/Button';\nimport Box from '@mui/material/Box';\n\nexport const InputCheck = styled.div<{ textColor: string }>`\n\tdisplay: flex;\n\tjustify-content: space-between;\n\tcolor: ${(props) => props.textColor};\n\tfont-size: 12px;\n\tmargin: 0 !important;\n\n\t& .name-length {\n\t\twhite-space: nowrap;\n\t}\n`;\n\nexport const NameErrorText = styled.span<{ visible: string }>`\n\tmargin-left: 8px;\n\tcolor: #dd2c00;\n\tvisibility: ${(props) => props.visible};\n`;\n\n\n\nexport const ChannelFormContainer = styled(FormControl)`\n\twidth: 100%;\n\n\t& .input {\n\t\tcolor: white;\n\t}\n\n\t& .MuiInput-root{\n\t\tcolor: white;\n\t}\n\n\t& .css-1480iag-MuiInputBase-root-MuiInput-root:before {\n\t\tborder-bottom: 1px solid rgb(255, 255, 255, 0.6);\n\n\t}\n\n\t& .css-1480iag-MuiInputBase-root-MuiInput-root:hover:not(.Mui-disabled):before {\n\t\t\tborder-bottom: 1px solid white;\n\t}\n\n`;\n\nexport const ChannelCreateBtn = styled(Button)`\n\twidth: 91px;\n\theight: 36px;\n\tmargin 5px 0 12px 8px;\n\tfont-weight:600;\n`;\n\n\n\nexport const ErrorText = styled.div`\n\tcolor: #dd2c00;\n\tfont-weight: 600;\n\tfont-size: 12px;\n`;\n\n","import React, { VFC, useState, useCallback, useEffect } from 'react';\nimport Box from '@mui/material/Box';\nimport Input from '@mui/material/Input';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport Select from '@mui/material/Select';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport IconButton from '@mui/material/IconButton';\nimport VisibilityOff from '@mui/icons-material/VisibilityOff';\nimport Visibility from '@mui/icons-material/Visibility';\nimport {\n  InputCheck,\n  ChannelFormContainer,\n  ChannelCreateBtn,\n  NameErrorText,\n  ErrorText,\n} from './style';\n\ninterface Props {\n  onSubmitChannelCreate: () => void;\n  setVisibility: (e: any) => void;\n  setName: (e: any) => void;\n  name: string;\n  value: string;\n  setPasswordValues: any;\n  createError: number;\n  setCreateError: (e: any) => void;\n}\n\nconst ChannelForm: VFC<Props> = ({\n  onSubmitChannelCreate,\n  setVisibility,\n  setName,\n  name,\n  value,\n  setPasswordValues,\n  createError,\n  setCreateError,\n}) => {\n  const handleMouseDownPassword = useCallback((event: any) => {\n    event.preventDefault();\n  }, []);\n  const [channelFormName, setChannelFormName] = useState('');\n  const [channelFormVisibility, setChannelFormVisibility] = useState('0');\n  const [channelFormPasswordValues, setChannelFormPasswordValues] = useState({\n    password: '',\n    showPassword: false,\n  });\n  const [channelNameError, setChannelNameError] = useState(0);\n  const [channelPasswordError, setChannelPasswordError] = useState(0);\n\n  useEffect(() => {\n    if (name) {\n      onSubmitChannelCreate();\n      setChannelFormName('');\n      setChannelFormVisibility('0');\n      setChannelFormPasswordValues({ password: '', showPassword: false });\n    }\n  }, [name]);\n\n  const onChannelCreateFromBtn = useCallback(() => {\n    if (channelFormName.length > 10 || channelFormName.length < 1) {\n      setChannelNameError(1);\n      return;\n    }\n    if (\n      channelFormVisibility == '1' &&\n      (channelFormPasswordValues.password.length > 20 ||\n        channelFormPasswordValues.password.length < 1)\n    ) {\n      setChannelPasswordError(1);\n      return;\n    }\n    setName(channelFormName);\n    setVisibility(channelFormVisibility);\n    setPasswordValues(channelFormPasswordValues);\n  }, [channelFormName, channelFormVisibility, channelFormPasswordValues]);\n\n  const onChangeFormName = useCallback(\n    (e) => {\n      setChannelFormName(e.target.value);\n      if (channelNameError) setChannelNameError(0);\n      if (createError) setCreateError(0);\n    },\n    [createError, channelNameError],\n  );\n\n  const onChangeFormVisibility = useCallback((e) => {\n    e.preventDefault();\n    setChannelFormVisibility(e.target.value);\n    setChannelFormPasswordValues({ password: '', showPassword: false });\n    setCreateError(0);\n  }, []);\n\n  const handleClickShowPassword = useCallback(() => {\n    setChannelFormPasswordValues({\n      ...channelFormPasswordValues,\n      showPassword: !channelFormPasswordValues.showPassword,\n    });\n  }, [channelFormPasswordValues, setChannelFormPasswordValues]);\n  const handleChange = useCallback(\n    (prop: any) => (event: any) => {\n      setChannelPasswordError(0);\n      setChannelFormPasswordValues({ ...channelFormPasswordValues, [prop]: event.target.value });\n    },\n    [channelFormPasswordValues, setChannelFormPasswordValues],\n  );\n\n  return (\n    <Box\n      component=\"form\"\n      sx={{\n        '& > :not(style)': { m: 1 },\n        width: 'calc(100% - 15px)',\n        padding: '5px 10px',\n      }}\n      noValidate\n      autoComplete=\"off\"\n    >\n      <ChannelFormContainer variant=\"standard\">\n        <InputLabel className=\"input\" htmlFor=\"component-simple\">\n          Name\n        </InputLabel>\n        <Input\n          className=\"input2\"\n          id=\"component-simple\"\n          autoComplete=\"off\"\n          value={channelFormName}\n          onChange={onChangeFormName}\n        />\n      </ChannelFormContainer>\n      <InputCheck textColor={channelFormName.length > 10 ? '#dd2c00' : 'hsla(0,0%,100%,.7)'}>\n        <NameErrorText visible={channelNameError == 0 ? 'hidden' : 'visible'}>\n          Name length must be between 1 and 10\n        </NameErrorText>\n        <span className=\"name-length\"> {channelFormName.length} / 10</span>\n      </InputCheck>\n      <ChannelFormContainer variant=\"standard\">\n        <InputLabel className=\"input\" id=\"demo-simple-select-standard-label\">\n          Visibility\n        </InputLabel>\n        <Select\n          className=\"input\"\n          labelId=\"demo-simple-select-standard-label\"\n          id=\"demo-simple-select-standard\"\n          value={channelFormVisibility}\n          onChange={onChangeFormVisibility}\n          label=\"Visibility\"\n        >\n          <MenuItem value={0}>Public</MenuItem>\n          <MenuItem value={1}>Protected</MenuItem>\n          <MenuItem value={2}>Private</MenuItem>\n        </Select>\n      </ChannelFormContainer>\n      {parseInt(channelFormVisibility) === 1 ? (\n        <ChannelFormContainer variant=\"standard\">\n          <InputLabel className=\"input\" htmlFor=\"standard-adornment-password\">\n            Password\n          </InputLabel>\n          <Input\n            id=\"standard-adornment-password\"\n            autoComplete=\"off\"\n            type={channelFormPasswordValues.showPassword ? 'text' : 'password'}\n            value={channelFormPasswordValues.password}\n            onChange={handleChange('password')}\n            endAdornment={\n              <InputAdornment position=\"end\">\n                <IconButton\n                  className=\"input\"\n                  aria-label=\"toggle password visibility\"\n                  onClick={handleClickShowPassword}\n                  onMouseDown={handleMouseDownPassword}\n                >\n                  {channelFormPasswordValues.showPassword ? <VisibilityOff /> : <Visibility />}\n                </IconButton>\n              </InputAdornment>\n            }\n          />\n        </ChannelFormContainer>\n      ) : null}\n      {channelPasswordError ? <ErrorText>Password length must be between 1 and 20</ErrorText> : ''}\n      <ChannelCreateBtn variant=\"contained\" onClick={onChannelCreateFromBtn}>\n        {value}\n      </ChannelCreateBtn>\n      {createError ? (\n        createError === 1 ? (\n          <ErrorText>\n            Failed either the channel already exists or there is a problem with the server\n          </ErrorText>\n        ) : (\n          <ErrorText>Failed to create channel</ErrorText>\n        )\n      ) : (\n        ''\n      )}\n    </Box>\n  );\n};\n\nexport default ChannelForm;\n","import styled from '@emotion/styled';\n\nexport const ChannelLeftDrawBarContainer = styled.div`\n\twidth: 280px;\n\theight: 100%;\n\tpadding: 30px 15px;\n\tbackground-color: #353636;\n\tborder-right: 1px solid #4f4f4f;\n\toverflow: hidden;\n\n\t& .search-input {\n\t\twidth: 100%;\n\t\toutline: none;\n\t\tresize: none;\n\t\tborder-radius: 4px;\n\t\tbackground: #bdbdbd;\n\t\tfont-size: 16px;\n\t\tfont-weight: bold;\n\t\tfont-family: monospace;\n\t\tcolor: black;\n\t\tborder: none;\n\t\tpadding: 0 15px;\n\t\theight: 40px;\n\t}\n\n\n\t& .header-wrapper {\n\t\tborder-top: 1px solid #4f4f4f;\n\t\tborder-bottom: 1px solid #4f4f4f;\n\t\tmargin: 10px 0;\n\t\tpadding: 14px 0 0;\n\t\theight: 80px;\n\t}\n\n\t& .channel-discover-wrapper {\n\t\tpadding: 0;\n\t\tmargin: 0;\n\t}\n\n\t& .channel-discover-wrapper:hover {\n\t\tbackground-color: rgba(74,75,84,0.7);\n\t}\n\n\t& .fireicon {\n\t\tmargin-right: 15px;\n\t}\n\n\t& .channel-discover-btn {\n\t\tcolor: white;\n\t}\n\n\t& .channel-list-wrapper {\n\t\theight: 70%;\n\t}\n\n\t& .channel-list {\n\t\tpadding: 0;\n\t\tmargin: 0;\n\t}\n\n\t& .channel-list:hover {\n\t\tbackground-color: rgba(74,75,84,0.7);\n\t}\n\n\t& .css-cvhtoe-MuiButtonBase-root-MuiListItemButton-root.Mui-selected {\n\t\tbackground-color: #666666 !important;\n\t}\n\n\t& .channel-list-btn {\n\t\tpadding: 0;\n\t\tmargin: 0;\n\t}\n\n\t& .channel-list-text {\n\t\tcolor: white;\n\t\tmargin: 4px 0 4px 18px\n\t}\n\n\n\t\n\t& .footer {\n\t\tdisplay: flex;\n\t\tjustify-content: center;\n\t\talign-items: center;\n\t\theight: 11%;\n\t}\n\n\t& .create-btn {\n\t\twidth: 180px;\n\t\theight: 35px;\n\t\tbackground-color: #597aff;\n\t\tborder-color: #597aff;\n\t\tfont-weight: bold;\n\t}\n\t\n\t\n\t& .css-cvhtoe-MuiButtonBase-root-MuiListItemButton-root.Mui-selected {\n\t\tbackground-color: #666666;\n\t}\n`;\n\nexport const ScrollbarColor = styled.div`\n  ...style;\n  background-color: #787c7f;\n  width: 8px;\n  border-radius: 5px;\n\n\t&:hover {\n\t\tbackground-color: white;\n\t}\n`;","import React, { useCallback, useState } from 'react';\nimport ListItemText from '@mui/material/ListItemText';\nimport Scrollbars from 'react-custom-scrollbars';\nimport List from '@mui/material/List';\nimport { IUser, IAllUser, IDmList, IChannelList } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport useSWR from 'swr';\nimport { Link } from 'react-router-dom';\nimport Button from '@mui/material/Button';\n\nimport ListItemButton from '@mui/material/ListItemButton';\nimport FlareIcon from '@mui/icons-material/Flare';\nimport { ChannelLeftDrawBarContainer, ScrollbarColor } from './style';\n\nlet channelList2: IChannelList[] | undefined;\n\nconst ChannelLeftDrawBar = () => {\n  const { data: users } = useSWR<IAllUser[]>('/api/users/alluser', fetcher);\n  const { data: channelList } = useSWR<IChannelList[]>('/api/channels/myChannelList', fetcher);\n  const { data: myData } = useSWR<IUser | null>('/api/users', fetcher);\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const [channelSearchInputValue, setChannelSearchInputValue] = useState('');\n\n  const handleListItemClick = useCallback(\n    (event: any, index: number) => {\n      setSelectedIndex(index);\n    },\n    [selectedIndex, setSelectedIndex],\n  );\n\n  const onChangeChannelSearchInput = useCallback((e) => {\n    setChannelSearchInputValue(e.target.value);\n  }, []);\n\n  if (channelSearchInputValue && channelSearchInputValue.indexOf('\\\\') === -1) {\n    channelList2 = channelList?.filter((channel) => {\n      const regex = new RegExp(channelSearchInputValue, 'gi');\n      return channel.name.match(regex);\n    });\n  }\n\n  const getChannelList = useCallback(\n    (inputValue: string) => {\n      if (!inputValue) return channelList;\n      else return channelList2;\n    },\n    [channelList],\n  );\n\n  return (\n    <ChannelLeftDrawBarContainer>\n      <input\n        className=\"search-input\"\n        autoComplete=\"off\"\n        onChange={onChangeChannelSearchInput}\n        value={channelSearchInputValue}\n      ></input>\n      <div className=\"header-wrapper\">\n        <Link to={`/channels`}>\n          <List\n            className=\"channel-discover-wrapper\"\n            component=\"nav\"\n            aria-label=\"main mailbox folders\"\n          >\n            <ListItemButton\n              className=\"channel-discover-btn\"\n              selected={selectedIndex === 0}\n              onClick={(event) => handleListItemClick(event, 0)}\n            >\n              <FlareIcon className=\"fireicon\" />\n              <ListItemText primary=\"Discover\" />\n            </ListItemButton>\n          </List>\n        </Link>\n      </div>\n      <div className=\"channel-list-wrapper\">\n        <Scrollbars\n          autoHide\n          renderThumbVertical={({ style, ...props }) => <ScrollbarColor {...props} />}\n        >\n          {getChannelList(channelSearchInputValue)?.map((channel: any, index) => {\n            let channelMode = '';\n            if (channel.type === 0) {\n              channelMode = 'Public';\n            } else if (channel.type === 1) {\n              channelMode = 'Protected';\n            } else if (channel.type === 2) {\n              channelMode = 'Private';\n            }\n            return (\n              <Link to={`/channels/${channel.id}`} key={channel.id}>\n                <List className=\"channel-list\" component=\"nav\" aria-label=\"main mailbox folders\">\n                  <ListItemButton\n                    className=\"channel-list-btn\"\n                    selected={selectedIndex === index + 1}\n                    onClick={(event) => handleListItemClick(event, index + 1)}\n                  >\n                    <ListItemText\n                      className=\"channel-list-text\"\n                      primary={channel.name}\n                      secondary={channelMode}\n                    />\n                  </ListItemButton>\n                </List>\n              </Link>\n            );\n          })}\n        </Scrollbars>\n      </div>\n      <div className=\"footer\">\n        <Link to={`/channels/create`}>\n          <Button className=\"create-btn\" variant=\"contained\">\n            CREATE&nbsp;&nbsp;+\n          </Button>\n        </Link>\n      </div>\n    </ChannelLeftDrawBarContainer>\n  );\n};\n\nexport default ChannelLeftDrawBar;\n"],"names":["InputCheck","styled","props","textColor","NameErrorText","visible","ChannelFormContainer","FormControl","ChannelCreateBtn","Button","ErrorText","onSubmitChannelCreate","setVisibility","setName","name","value","setPasswordValues","createError","setCreateError","handleMouseDownPassword","useCallback","event","preventDefault","useState","channelFormName","setChannelFormName","channelFormVisibility","setChannelFormVisibility","password","showPassword","channelFormPasswordValues","setChannelFormPasswordValues","channelNameError","setChannelNameError","channelPasswordError","setChannelPasswordError","useEffect","onChannelCreateFromBtn","length","onChangeFormName","e","target","onChangeFormVisibility","handleClickShowPassword","handleChange","prop","Box","component","sx","m","width","padding","noValidate","autoComplete","variant","InputLabel","className","htmlFor","Input","id","onChange","Select","labelId","label","MenuItem","parseInt","type","endAdornment","InputAdornment","position","IconButton","onClick","onMouseDown","VisibilityOff","Visibility","channelList2","ChannelLeftDrawBarContainer","ScrollbarColor","useSWR","fetcher","data","channelList","selectedIndex","setSelectedIndex","channelSearchInputValue","setChannelSearchInputValue","handleListItemClick","index","onChangeChannelSearchInput","indexOf","filter","channel","regex","RegExp","match","getChannelList","inputValue","to","List","ListItemButton","selected","Flare","ListItemText","primary","autoHide","renderThumbVertical","style","map","channelMode","key","secondary"],"sourceRoot":""}