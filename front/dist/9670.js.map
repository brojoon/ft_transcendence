{"version":3,"file":"9670.js","mappings":"yKAEaA,E,QAAYC,EAAAA,IAAH,I,EAAA,gL,kBAAA,E,slCCUtB,IAAMC,GAAkBC,EAAAA,EAAAA,KAAS,kBAAM,qHACjCC,GAAcD,EAAAA,EAAAA,KAAS,kBAAM,kJAC7BE,GAAgBF,EAAAA,EAAAA,KAAS,kBAAM,+HAoFrC,EAlFgB,YACWG,EAAAA,EAAAA,IAAqB,aAAcC,EAAAA,GAApDC,KAAR,IACA,GAA2DF,EAAAA,EAAAA,IACzD,8BACAC,EAAAA,GAFYE,EAAd,EAAQD,KAA6BE,EAArC,EAA6BC,OAKvBC,GAAUC,EAAAA,EAAAA,MAChB,KAAwBC,EAAAA,EAAAA,UAAS,IAAjC,GAAOC,EAAP,KAAaC,EAAb,KACA,KAAoCF,EAAAA,EAAAA,UAAS,KAA7C,GAAOG,EAAP,KAAmBC,EAAnB,KACA,KAAsCJ,EAAAA,EAAAA,UAAS,GAA/C,GAAOK,EAAP,KAAoBC,EAApB,KACA,KAA4CN,EAAAA,EAAAA,UAAS,CACnDO,SAAU,GACVC,cAAc,IAFhB,GAAOC,EAAP,KAAuBC,EAAvB,KAKMC,GAAwBC,EAAAA,EAAAA,cAAY,WACxCC,IAAAA,KAAA,+BAE4BZ,EAF5B,YAEoCE,GAChC,CACEI,SAAUE,EAAeF,UAE3BO,EAAAA,GAEDC,MAAK,SAACC,GACLd,EAAQ,IACRE,EAAc,KACdM,EAAkB,CAChBH,SAAU,GACVC,cAAc,IAEhBS,EAAAA,GAAAA,QAAc,iCAAkC,CAC9CC,UAAW,IACXC,SAAUF,EAAAA,GAAAA,SAAAA,UACVG,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,MAAO,YAET3B,IAAoBmB,MAAK,WACnBpB,GACFG,EAAQ0B,KAAR,oBAA0BR,EAAStB,aAIxC+B,OAAM,SAACC,GACNpB,EAAe,GACfJ,EAAQ,IACRE,EAAc,KACdM,EAAkB,CAChBH,SAAU,GACVC,cAAc,SAGnB,CAACP,EAAME,EAAYR,EAAec,IAErC,OACE,gBAACvB,EAAD,KACE,gBAAC,KAAD,KACE,gBAAC,KAAD,CAAOyC,OAAK,EAACC,KAAK,YAAYC,UAAWzC,IACzC,gBAAC,KAAD,CACEuC,OAAK,EACLC,KAAK,mBACLE,OAAQ,kBACN,gBAACvC,EAAD,CACEoB,sBAAuBA,EACvBV,KAAMA,EACNG,cAAeA,EACfF,QAASA,EACTQ,kBAAmBA,EACnBL,YAAaA,EACbC,eAAgBA,OAItB,gBAAC,KAAD,CAAOqB,OAAK,EAACC,KAAK,gBAAgBC,UAAWvC","sources":["webpack://brojoon/./pages/Channels/style.ts","webpack://brojoon/./pages/Channels/index.tsx"],"sourcesContent":["import styled from '@emotion/styled';\r\n\r\nexport const Container = styled.div`\r\n\theight: 100vh;\r\n\tdisplay: flex;\r\n\twidth: 100%;\r\n\tborder-left: 1px solid #4f4f4f;\r\n\tmargin: 0;\r\n\tpadding: 0;\r\n\tbackground-color: #1e1e1e;\r\n\toverflow: hidden;\r\n\r\n`;","import React, { useState, useCallback, useEffect } from 'react';\r\nimport { Container } from './style';\r\nimport { Route, Switch, useHistory } from 'react-router-dom';\r\nimport Grid from '@mui/material/Grid';\r\nimport useSWR from 'swr';\r\nimport { IChannelList, IUser } from '@typings/db';\r\nimport fetcher from '@utils/fetcher';\r\nimport axios from 'axios';\r\nimport config from '@utils/config';\r\nimport { toast } from 'react-toastify';\r\nimport loadable from '@loadable/component';\r\n\r\nconst ChannelDiscover = loadable(() => import('@pages/ChannelDiscover'));\r\nconst ChannelRoom = loadable(() => import('@pages/ChannelRoom'));\r\nconst ChannelCreate = loadable(() => import('@pages/ChannelCreate'));\r\n\r\nconst Channel = () => {\r\n  const { data: myData } = useSWR<IUser | null>('/api/users', fetcher);\r\n  const { data: mychannelList, mutate: mutateChannelList } = useSWR<IChannelList[]>(\r\n    '/api/channels/myChannelList',\r\n    fetcher,\r\n  );\r\n\r\n  const history = useHistory();\r\n  const [name, setName] = useState('');\r\n  const [visibility, setVisibility] = useState('0');\r\n  const [createError, setCreateError] = useState(0);\r\n  const [PasswordValues, setPasswordValues] = useState({\r\n    password: '',\r\n    showPassword: false,\r\n  });\r\n\r\n  const onSubmitChannelCreate = useCallback(() => {\r\n    axios\r\n      .post(\r\n        `/api/channels/create/${name}/${visibility}`,\r\n        {\r\n          password: PasswordValues.password,\r\n        },\r\n        config,\r\n      )\r\n      .then((response) => {\r\n        setName('');\r\n        setVisibility('0');\r\n        setPasswordValues({\r\n          password: '',\r\n          showPassword: false,\r\n        });\r\n        toast.success('Successfully created a channel', {\r\n          autoClose: 4000,\r\n          position: toast.POSITION.TOP_RIGHT,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          theme: 'colored',\r\n        });\r\n        mutateChannelList().then(() => {\r\n          if (mychannelList) {\r\n            history.push(`/channels/${response.data}`);\r\n          }\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        setCreateError(1);\r\n        setName('');\r\n        setVisibility('0');\r\n        setPasswordValues({\r\n          password: '',\r\n          showPassword: false,\r\n        });\r\n      });\r\n  }, [name, visibility, mychannelList, PasswordValues]);\r\n\r\n  return (\r\n    <Container>\r\n      <Switch>\r\n        <Route exact path=\"/channels\" component={ChannelDiscover} />\r\n        <Route\r\n          exact\r\n          path=\"/channels/create\"\r\n          render={() => (\r\n            <ChannelCreate\r\n              onSubmitChannelCreate={onSubmitChannelCreate}\r\n              name={name}\r\n              setVisibility={setVisibility}\r\n              setName={setName}\r\n              setPasswordValues={setPasswordValues}\r\n              createError={createError}\r\n              setCreateError={setCreateError}\r\n            />\r\n          )}\r\n        />\r\n        <Route exact path=\"/channels/:id\" component={ChannelRoom} />\r\n      </Switch>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Channel;\r\n"],"names":["Container","styled","ChannelDiscover","loadable","ChannelRoom","ChannelCreate","useSWR","fetcher","data","mychannelList","mutateChannelList","mutate","history","useHistory","useState","name","setName","visibility","setVisibility","createError","setCreateError","password","showPassword","PasswordValues","setPasswordValues","onSubmitChannelCreate","useCallback","axios","config","then","response","toast","autoClose","position","hideProgressBar","closeOnClick","pauseOnHover","theme","push","catch","error","exact","path","component","render"],"sourceRoot":""}