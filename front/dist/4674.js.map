{"version":3,"file":"4674.js","mappings":"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","sources":["webpack://brojoon/./components/ChannelForm/style.ts","webpack://brojoon/./components/ChannelForm/index.tsx","webpack://brojoon/./components/ChannelLeftDrawBar/style.ts","webpack://brojoon/./components/ChannelLeftDrawBar/index.tsx"],"sourcesContent":["import styled from '@emotion/styled';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport Button from '@mui/material/Button';\r\nimport Box from '@mui/material/Box';\r\n\r\nexport const InputCheck = styled.div<{ textColor: string }>`\r\n\tdisplay: flex;\r\n\tjustify-content: space-between;\r\n\tcolor: ${(props) => props.textColor};\r\n\tfont-size: 12px;\r\n\tmargin: 0 !important;\r\n\r\n\t& .name-length {\r\n\t\twhite-space: nowrap;\r\n\t}\r\n`;\r\n\r\nexport const NameErrorText = styled.span<{ visible: string }>`\r\n\tmargin-left: 8px;\r\n\tcolor: #dd2c00;\r\n\tvisibility: ${(props) => props.visible};\r\n`;\r\n\r\n\r\n\r\nexport const ChannelFormContainer = styled(FormControl)`\r\n\twidth: 100%;\r\n\r\n\t& .input {\r\n\t\tcolor: white;\r\n\t}\r\n\r\n\t& .MuiInput-root{\r\n\t\tcolor: white;\r\n\t}\r\n\r\n\t& .css-1480iag-MuiInputBase-root-MuiInput-root:before {\r\n\t\tborder-bottom: 1px solid rgb(255, 255, 255, 0.6);\r\n\r\n\t}\r\n\r\n\t& .css-1480iag-MuiInputBase-root-MuiInput-root:hover:not(.Mui-disabled):before {\r\n\t\t\tborder-bottom: 1px solid white;\r\n\t}\r\n\r\n`;\r\n\r\nexport const ChannelCreateBtn = styled(Button)`\r\n\twidth: 91px;\r\n\theight: 36px;\r\n\tmargin 5px 0 12px 8px;\r\n\tfont-weight:600;\r\n`;\r\n\r\n\r\n\r\nexport const ErrorText = styled.div`\r\n\tcolor: #dd2c00;\r\n\tfont-weight: 600;\r\n\tfont-size: 12px;\r\n`;\r\n\r\n","import React, { VFC, useState, useCallback, useEffect } from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport Input from '@mui/material/Input';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport Select from '@mui/material/Select';\r\nimport InputAdornment from '@mui/material/InputAdornment';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport VisibilityOff from '@mui/icons-material/VisibilityOff';\r\nimport Visibility from '@mui/icons-material/Visibility';\r\nimport {\r\n  InputCheck,\r\n  ChannelFormContainer,\r\n  ChannelCreateBtn,\r\n  NameErrorText,\r\n  ErrorText,\r\n} from './style';\r\n\r\ninterface Props {\r\n  onSubmitChannelCreate: () => void;\r\n  setVisibility: (e: any) => void;\r\n  setName: (e: any) => void;\r\n  name: string;\r\n  value: string;\r\n  setPasswordValues: any;\r\n  createError: number;\r\n  setCreateError: (e: any) => void;\r\n}\r\n\r\nconst ChannelForm: VFC<Props> = ({\r\n  onSubmitChannelCreate,\r\n  setVisibility,\r\n  setName,\r\n  name,\r\n  value,\r\n  setPasswordValues,\r\n  createError,\r\n  setCreateError,\r\n}) => {\r\n  const handleMouseDownPassword = useCallback((event: any) => {\r\n    event.preventDefault();\r\n  }, []);\r\n  const [channelFormName, setChannelFormName] = useState('');\r\n  const [channelFormVisibility, setChannelFormVisibility] = useState('0');\r\n  const [channelFormPasswordValues, setChannelFormPasswordValues] = useState({\r\n    password: '',\r\n    showPassword: false,\r\n  });\r\n  const [channelNameError, setChannelNameError] = useState(0);\r\n  const [channelPasswordError, setChannelPasswordError] = useState(0);\r\n\r\n  useEffect(() => {\r\n    if (name) {\r\n      onSubmitChannelCreate();\r\n      setChannelFormName('');\r\n      setChannelFormVisibility('0');\r\n      setChannelFormPasswordValues({ password: '', showPassword: false });\r\n    }\r\n  }, [name]);\r\n\r\n  const onChannelCreateFromBtn = useCallback(() => {\r\n    if (channelFormName.length > 10 || channelFormName.length < 1) {\r\n      setChannelNameError(1);\r\n      return;\r\n    }\r\n    if (\r\n      channelFormVisibility == '1' &&\r\n      (channelFormPasswordValues.password.length > 20 ||\r\n        channelFormPasswordValues.password.length < 1)\r\n    ) {\r\n      setChannelPasswordError(1);\r\n      return;\r\n    }\r\n    setName(channelFormName);\r\n    setVisibility(channelFormVisibility);\r\n    setPasswordValues(channelFormPasswordValues);\r\n  }, [channelFormName, channelFormVisibility, channelFormPasswordValues]);\r\n\r\n  const onChangeFormName = useCallback(\r\n    (e) => {\r\n      setChannelFormName(e.target.value);\r\n      if (channelNameError) setChannelNameError(0);\r\n      if (createError) setCreateError(0);\r\n    },\r\n    [createError, channelNameError],\r\n  );\r\n\r\n  const onChangeFormVisibility = useCallback((e) => {\r\n    e.preventDefault();\r\n    setChannelFormVisibility(e.target.value);\r\n    setChannelFormPasswordValues({ password: '', showPassword: false });\r\n    setCreateError(0);\r\n  }, []);\r\n\r\n  const handleClickShowPassword = useCallback(() => {\r\n    setChannelFormPasswordValues({\r\n      ...channelFormPasswordValues,\r\n      showPassword: !channelFormPasswordValues.showPassword,\r\n    });\r\n  }, [channelFormPasswordValues, setChannelFormPasswordValues]);\r\n  const handleChange = useCallback(\r\n    (prop: any) => (event: any) => {\r\n      setChannelPasswordError(0);\r\n      setChannelFormPasswordValues({ ...channelFormPasswordValues, [prop]: event.target.value });\r\n    },\r\n    [channelFormPasswordValues, setChannelFormPasswordValues],\r\n  );\r\n\r\n  return (\r\n    <Box\r\n      component=\"form\"\r\n      sx={{\r\n        '& > :not(style)': { m: 1 },\r\n        width: 'calc(100% - 15px)',\r\n        padding: '5px 10px',\r\n      }}\r\n      noValidate\r\n      autoComplete=\"off\"\r\n    >\r\n      <ChannelFormContainer variant=\"standard\">\r\n        <InputLabel className=\"input\" htmlFor=\"component-simple\">\r\n          Name\r\n        </InputLabel>\r\n        <Input\r\n          className=\"input2\"\r\n          id=\"component-simple\"\r\n          autoComplete=\"off\"\r\n          value={channelFormName}\r\n          onChange={onChangeFormName}\r\n        />\r\n      </ChannelFormContainer>\r\n      <InputCheck textColor={channelFormName.length > 10 ? '#dd2c00' : 'hsla(0,0%,100%,.7)'}>\r\n        <NameErrorText visible={channelNameError == 0 ? 'hidden' : 'visible'}>\r\n          Name length must be between 1 and 10\r\n        </NameErrorText>\r\n        <span className=\"name-length\"> {channelFormName.length} / 10</span>\r\n      </InputCheck>\r\n      <ChannelFormContainer variant=\"standard\">\r\n        <InputLabel className=\"input\" id=\"demo-simple-select-standard-label\">\r\n          Visibility\r\n        </InputLabel>\r\n        <Select\r\n          className=\"input\"\r\n          labelId=\"demo-simple-select-standard-label\"\r\n          id=\"demo-simple-select-standard\"\r\n          value={channelFormVisibility}\r\n          onChange={onChangeFormVisibility}\r\n          label=\"Visibility\"\r\n        >\r\n          <MenuItem value={0}>Public</MenuItem>\r\n          <MenuItem value={1}>Protected</MenuItem>\r\n          <MenuItem value={2}>Private</MenuItem>\r\n        </Select>\r\n      </ChannelFormContainer>\r\n      {parseInt(channelFormVisibility) === 1 ? (\r\n        <ChannelFormContainer variant=\"standard\">\r\n          <InputLabel className=\"input\" htmlFor=\"standard-adornment-password\">\r\n            Password\r\n          </InputLabel>\r\n          <Input\r\n            id=\"standard-adornment-password\"\r\n            autoComplete=\"off\"\r\n            type={channelFormPasswordValues.showPassword ? 'text' : 'password'}\r\n            value={channelFormPasswordValues.password}\r\n            onChange={handleChange('password')}\r\n            endAdornment={\r\n              <InputAdornment position=\"end\">\r\n                <IconButton\r\n                  className=\"input\"\r\n                  aria-label=\"toggle password visibility\"\r\n                  onClick={handleClickShowPassword}\r\n                  onMouseDown={handleMouseDownPassword}\r\n                >\r\n                  {channelFormPasswordValues.showPassword ? <VisibilityOff /> : <Visibility />}\r\n                </IconButton>\r\n              </InputAdornment>\r\n            }\r\n          />\r\n        </ChannelFormContainer>\r\n      ) : null}\r\n      {channelPasswordError ? <ErrorText>Password length must be between 1 and 20</ErrorText> : ''}\r\n      <ChannelCreateBtn variant=\"contained\" onClick={onChannelCreateFromBtn}>\r\n        {value}\r\n      </ChannelCreateBtn>\r\n      {createError ? (\r\n        createError === 1 ? (\r\n          <ErrorText>\r\n            Failed either the channel already exists or there is a problem with the server\r\n          </ErrorText>\r\n        ) : (\r\n          <ErrorText>Failed to create channel</ErrorText>\r\n        )\r\n      ) : (\r\n        ''\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ChannelForm;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const ChannelLeftDrawBarContainer = styled.div`\r\n\twidth: 280px;\r\n\theight: 100%;\r\n\tpadding: 30px 15px;\r\n\tbackground-color: #353636;\r\n\tborder-right: 1px solid #4f4f4f;\r\n\toverflow: hidden;\r\n\r\n\t& .search-input {\r\n\t\twidth: 100%;\r\n\t\toutline: none;\r\n\t\tresize: none;\r\n\t\tborder-radius: 4px;\r\n\t\tbackground: #bdbdbd;\r\n\t\tfont-size: 16px;\r\n\t\tfont-weight: bold;\r\n\t\tfont-family: monospace;\r\n\t\tcolor: black;\r\n\t\tborder: none;\r\n\t\tpadding: 0 15px;\r\n\t\theight: 40px;\r\n\t}\r\n\r\n\r\n\t& .header-wrapper {\r\n\t\tborder-top: 1px solid #4f4f4f;\r\n\t\tborder-bottom: 1px solid #4f4f4f;\r\n\t\tmargin: 10px 0;\r\n\t\tpadding: 14px 0 0;\r\n\t\theight: 80px;\r\n\t}\r\n\r\n\t& .channel-discover-wrapper {\r\n\t\tpadding: 0;\r\n\t\tmargin: 0;\r\n\t}\r\n\r\n\t& .channel-discover-wrapper:hover {\r\n\t\tbackground-color: rgba(74,75,84,0.7);\r\n\t}\r\n\r\n\t& .fireicon {\r\n\t\tmargin-right: 15px;\r\n\t}\r\n\r\n\t& .channel-discover-btn {\r\n\t\tcolor: white;\r\n\t}\r\n\r\n\t& .channel-list-wrapper {\r\n\t\theight: 70%;\r\n\t}\r\n\r\n\t& .channel-list {\r\n\t\tpadding: 0;\r\n\t\tmargin: 0;\r\n\t}\r\n\r\n\t& .channel-list:hover {\r\n\t\tbackground-color: rgba(74,75,84,0.7);\r\n\t}\r\n\r\n\t& .css-cvhtoe-MuiButtonBase-root-MuiListItemButton-root.Mui-selected {\r\n\t\tbackground-color: #666666 !important;\r\n\t}\r\n\r\n\t& .channel-list-btn {\r\n\t\tpadding: 0;\r\n\t\tmargin: 0;\r\n\t}\r\n\r\n\t& .channel-list-text {\r\n\t\tcolor: white;\r\n\t\tmargin: 4px 0 4px 18px\r\n\t}\r\n\r\n\r\n\t\r\n\t& .footer {\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: center;\r\n\t\talign-items: center;\r\n\t\theight: 11%;\r\n\t}\r\n\r\n\t& .create-btn {\r\n\t\twidth: 180px;\r\n\t\theight: 35px;\r\n\t\tbackground-color: #597aff;\r\n\t\tborder-color: #597aff;\r\n\t\tfont-weight: bold;\r\n\t}\r\n\t\r\n\t\r\n\t& .css-cvhtoe-MuiButtonBase-root-MuiListItemButton-root.Mui-selected {\r\n\t\tbackground-color: #666666;\r\n\t}\r\n`;\r\n\r\nexport const ScrollbarColor = styled.div`\r\n  ...style;\r\n  background-color: #787c7f;\r\n  width: 8px;\r\n  border-radius: 5px;\r\n\r\n\t&:hover {\r\n\t\tbackground-color: white;\r\n\t}\r\n`;","import React, { useCallback, useState } from 'react';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport Scrollbars from 'react-custom-scrollbars';\r\nimport List from '@mui/material/List';\r\nimport { IUser, IAllUser, IDmList, IChannelList } from '@typings/db';\r\nimport fetcher from '@utils/fetcher';\r\nimport useSWR from 'swr';\r\nimport { Link } from 'react-router-dom';\r\nimport Button from '@mui/material/Button';\r\n\r\nimport ListItemButton from '@mui/material/ListItemButton';\r\nimport FlareIcon from '@mui/icons-material/Flare';\r\nimport { ChannelLeftDrawBarContainer, ScrollbarColor } from './style';\r\n\r\nlet channelList2: IChannelList[] | undefined;\r\n\r\nconst ChannelLeftDrawBar = () => {\r\n  const { data: users } = useSWR<IAllUser[]>('/api/users/alluser', fetcher);\r\n  const { data: channelList } = useSWR<IChannelList[]>('/api/channels/myChannelList', fetcher);\r\n  const { data: myData } = useSWR<IUser | null>('/api/users', fetcher);\r\n  const [selectedIndex, setSelectedIndex] = useState(0);\r\n  const [channelSearchInputValue, setChannelSearchInputValue] = useState('');\r\n\r\n  const handleListItemClick = useCallback(\r\n    (event: any, index: number) => {\r\n      setSelectedIndex(index);\r\n    },\r\n    [selectedIndex, setSelectedIndex],\r\n  );\r\n\r\n  const onChangeChannelSearchInput = useCallback((e) => {\r\n    setChannelSearchInputValue(e.target.value);\r\n  }, []);\r\n\r\n  if (channelSearchInputValue && channelSearchInputValue.indexOf('\\\\') === -1) {\r\n    channelList2 = channelList?.filter((channel) => {\r\n      const regex = new RegExp(channelSearchInputValue, 'gi');\r\n      return channel.name.match(regex);\r\n    });\r\n  }\r\n\r\n  const getChannelList = useCallback(\r\n    (inputValue: string) => {\r\n      if (!inputValue) return channelList;\r\n      else return channelList2;\r\n    },\r\n    [channelList],\r\n  );\r\n\r\n  return (\r\n    <ChannelLeftDrawBarContainer>\r\n      <input\r\n        className=\"search-input\"\r\n        autoComplete=\"off\"\r\n        onChange={onChangeChannelSearchInput}\r\n        value={channelSearchInputValue}\r\n      ></input>\r\n      <div className=\"header-wrapper\">\r\n        <Link to={`/channels`}>\r\n          <List\r\n            className=\"channel-discover-wrapper\"\r\n            component=\"nav\"\r\n            aria-label=\"main mailbox folders\"\r\n          >\r\n            <ListItemButton\r\n              className=\"channel-discover-btn\"\r\n              selected={selectedIndex === 0}\r\n              onClick={(event) => handleListItemClick(event, 0)}\r\n            >\r\n              <FlareIcon className=\"fireicon\" />\r\n              <ListItemText primary=\"Discover\" />\r\n            </ListItemButton>\r\n          </List>\r\n        </Link>\r\n      </div>\r\n      <div className=\"channel-list-wrapper\">\r\n        <Scrollbars\r\n          autoHide\r\n          renderThumbVertical={({ style, ...props }) => <ScrollbarColor {...props} />}\r\n        >\r\n          {getChannelList(channelSearchInputValue)?.map((channel: any, index) => {\r\n            let channelMode = '';\r\n            if (channel.type === 0) {\r\n              channelMode = 'Public';\r\n            } else if (channel.type === 1) {\r\n              channelMode = 'Protected';\r\n            } else if (channel.type === 2) {\r\n              channelMode = 'Private';\r\n            }\r\n            return (\r\n              <Link to={`/channels/${channel.id}`} key={channel.id}>\r\n                <List className=\"channel-list\" component=\"nav\" aria-label=\"main mailbox folders\">\r\n                  <ListItemButton\r\n                    className=\"channel-list-btn\"\r\n                    selected={selectedIndex === index + 1}\r\n                    onClick={(event) => handleListItemClick(event, index + 1)}\r\n                  >\r\n                    <ListItemText\r\n                      className=\"channel-list-text\"\r\n                      primary={channel.name}\r\n                      secondary={channelMode}\r\n                    />\r\n                  </ListItemButton>\r\n                </List>\r\n              </Link>\r\n            );\r\n          })}\r\n        </Scrollbars>\r\n      </div>\r\n      <div className=\"footer\">\r\n        <Link to={`/channels/create`}>\r\n          <Button className=\"create-btn\" variant=\"contained\">\r\n            CREATE&nbsp;&nbsp;+\r\n          </Button>\r\n        </Link>\r\n      </div>\r\n    </ChannelLeftDrawBarContainer>\r\n  );\r\n};\r\n\r\nexport default ChannelLeftDrawBar;\r\n"],"names":["InputCheck","styled","props","textColor","NameErrorText","visible","ChannelFormContainer","FormControl","ChannelCreateBtn","Button","ErrorText","onSubmitChannelCreate","setVisibility","setName","name","value","setPasswordValues","createError","setCreateError","handleMouseDownPassword","useCallback","event","preventDefault","useState","channelFormName","setChannelFormName","channelFormVisibility","setChannelFormVisibility","password","showPassword","channelFormPasswordValues","setChannelFormPasswordValues","channelNameError","setChannelNameError","channelPasswordError","setChannelPasswordError","useEffect","onChannelCreateFromBtn","length","onChangeFormName","e","target","onChangeFormVisibility","handleClickShowPassword","handleChange","prop","Box","component","sx","m","width","padding","noValidate","autoComplete","variant","InputLabel","className","htmlFor","Input","id","onChange","Select","labelId","label","MenuItem","parseInt","type","endAdornment","InputAdornment","position","IconButton","onClick","onMouseDown","VisibilityOff","Visibility","channelList2","ChannelLeftDrawBarContainer","ScrollbarColor","useSWR","fetcher","data","channelList","selectedIndex","setSelectedIndex","channelSearchInputValue","setChannelSearchInputValue","handleListItemClick","index","onChangeChannelSearchInput","indexOf","filter","channel","regex","RegExp","match","getChannelList","inputValue","to","List","ListItemButton","selected","Flare","ListItemText","primary","autoHide","renderThumbVertical","style","map","channelMode","key","secondary"],"sourceRoot":""}