{"version":3,"file":"9566.js","mappings":"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","sources":["webpack://brojoon/./components/ChatBox/style.ts","webpack://brojoon/./components/ChatBox/index.tsx","webpack://brojoon/./components/DMLeftDrawer/style.ts","webpack://brojoon/./components/DMLeftDrawer/index.tsx","webpack://brojoon/./components/DMChatHeader/style.ts","webpack://brojoon/./components/DMChatHeader/index.tsx","webpack://brojoon/./components/DMChatList/style.ts","webpack://brojoon/./components/DMChatList/index.tsx","webpack://brojoon/./pages/DirectMessage/style.ts","webpack://brojoon/./pages/DirectMessage/index.tsx","webpack://brojoon/./utils/makeSection.ts"],"sourcesContent":["import styled from '@emotion/styled';\r\n\r\nexport const ChatBoxContainer = styled.div`\r\n\theight: 60px;\r\n\tbackground-color: #272727;\r\n\tpadding: 20px 6px 3px 16px;\r\n\tdisplay: flex;\r\n\tjustify-content: center;\r\n\talign-items: center;\r\n\r\n\t& .chat-box-form {\r\n\t\twidth: 100%;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: row;\r\n\t}\r\n\r\n\t& .chat-box-input {\r\n\t\twidth: 95%;\r\n\t\toutline: none;\r\n\t\tresize: none;\r\n\t\tborder-radius: 4px;\r\n\t\tbackground: #bdbdbd;\r\n\t\tfont-size: 16px;\r\n\t\tfont-weight: bold;\r\n\t\tfont-family: monospace;\r\n\t\theight: 37px;\r\n\t\tcolor: black;\r\n\t\tborder: none;\r\n\t\tpadding: 10px;\r\n\t}\r\n\r\n\t& .submit-btn {\r\n\t\tbackground: #272727;\r\n\t\tbox-shadow: none;\r\n\t\tborder: none;\r\n\t\tcolor: white;\r\n\t\tmargin-left: 10px;\r\n\t\tcursor: pointer;\r\n\t}\r\n`;","import React, { useCallback, useEffect, useState, VFC } from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport SendIcon from '@mui/icons-material/Send';\r\nimport { ChatBoxContainer } from './style';\r\n\r\ninterface Props {\r\n  onSubmitChat: () => void;\r\n  setChat: (chat: string) => void;\r\n  chat: string;\r\n}\r\n\r\nconst ChatBox: VFC<Props> = ({ chat, onSubmitChat, setChat }) => {\r\n  const [chatBoxChat, setChatBoxChat] = useState('');\r\n  const onChangeChatBoxChat = useCallback((e) => {\r\n    setChatBoxChat(e.target.value);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (chat) {\r\n      onSubmitChat();\r\n      setChatBoxChat('');\r\n    }\r\n  }, [chat, onSubmitChat]);\r\n\r\n  const onSubmitChatBoxChat = useCallback(\r\n    (e) => {\r\n      e.preventDefault();\r\n      setChat(chatBoxChat);\r\n    },\r\n    [chatBoxChat, onSubmitChat],\r\n  );\r\n\r\n  return (\r\n    <ChatBoxContainer>\r\n      <form className=\"chat-box-form\">\r\n        <input\r\n          className=\"chat-box-input\"\r\n          value={chatBoxChat}\r\n          onChange={onChangeChatBoxChat}\r\n        ></input>\r\n        <button className=\"submit-btn\" onClick={onSubmitChatBoxChat}>\r\n          <SendIcon />\r\n        </button>\r\n      </form>\r\n    </ChatBoxContainer>\r\n  );\r\n};\r\n\r\nexport default ChatBox;\r\n","import styled from '@emotion/styled';\r\nimport Avatar from '@mui/material/Avatar';\r\n\r\nexport const DMLeftDrawerContainer = styled.div`\r\n\twidth: 300px;\r\n\theight: 100%;\r\n\tpadding: 30px 15px;\r\n\tbackground-color: #363636;\r\n\tborder-right: 1px solid #4f4f4f;\r\n\toverflow: hidden;\r\n\r\n\t& .search-input {\r\n\t\twidth: 100%;\r\n\t\toutline: none;\r\n\t\tresize: none;\r\n\t\tborder-radius: 4px;\r\n\t\tbackground: #bdbdbd;\r\n\t\tfont-size: 16px;\r\n\t\tfont-weight: bold;\r\n\t\tfont-family: monospace;\r\n\t\theight: 40px;\r\n\t\tcolor: black;\r\n\t\tborder: none;\r\n\t\tpadding: 0 12px;\r\n\t}\r\n\r\n\t& .friend-icon-wrapper {\r\n\t\tborder-top: 1px solid #4f4f4f;\r\n\t\tborder-bottom: 1px solid #4f4f4f;\r\n\t\tmargin: 10px 0;\r\n\t\tpadding: 14px 0 0;\r\n\t\theight: 80px;\r\n\t}\r\n\r\n\t& .css-cvhtoe-MuiButtonBase-root-MuiListItemButton-root.Mui-selected {\r\n\t\tbackground-color: #666666 !important;\r\n\t}\r\n\r\n\t& .friend-list-wrapper {\r\n\t\tmargin: 0;\r\n\t\tpadding: 0;\r\n\t}\r\n\r\n\t& .friend-list-wrapper:hover {\r\n\t\tbackground-color: rgba(74,75,84,0.7);\r\n\t}\r\n\r\n\t& .friend-list-btn {\r\n\t\tcolor: white;\r\n\t}\r\n\r\n\t& .friend-list-icon {\r\n\t\tmargin-right: 20px;\r\n\t}\r\n`;\r\n\r\nexport const DMListContainer = styled.div`\r\n\theight: 79%;\r\n\r\n\t& .list {\r\n\t\tpadding: 0;\r\n\t\tmargin: 0;\r\n\t}\r\n\r\n\t& .css-cvhtoe-MuiButtonBase-root-MuiListItemButton-root.Mui-selected {\r\n\t\tbackground-color: #666666 !important;\r\n\t}\r\n\r\n\t& .list:hover {\r\n\t\tbackground-color: rgba(74,75,84,0.7);\r\n\t}\r\n\r\n\t& .list-item-button {\r\n\t\tpadding: 8px;\r\n\t}\r\n\r\n\t& .user-avatar-id-wrapper {\r\n\t\tdisplay: flex;\r\n\r\n\t\talign-items: center;\r\n\t}\r\n\r\n\r\n\t& .user-id {\r\n\t\tmargin-left: 12px;\r\n\t\tcolor: white;\r\n\t}\r\n\r\n\r\n`;\r\n\r\nexport const UserAvatar = styled(Avatar) <{ isstate: string }>`\r\n\tborder: ${(props) => props.isstate};\r\n\tmargin-left: 0;\r\n`;\r\n\r\nexport const ScrollbarColor = styled.div`\r\n  ...style;\r\n  background-color: #787c7f;\r\n  width: 8px;\r\n  border-radius: 5px;\r\n\r\n\t&:hover {\r\n\t\tbackground-color: white;\r\n\t}\r\n`;","import React, { useCallback, useState, useContext } from 'react';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport Scrollbars from 'react-custom-scrollbars';\r\nimport List from '@mui/material/List';\r\nimport { IUser, IAllUser, IDmList, IBlockList } from '@typings/db';\r\nimport fetcher from '@utils/fetcher';\r\nimport useSWR from 'swr';\r\nimport { Link } from 'react-router-dom';\r\nimport EmojiPeopleRoundedIcon from '@mui/icons-material/EmojiPeopleRounded';\r\nimport ListItemButton from '@mui/material/ListItemButton';\r\nimport { DMLeftDrawerContainer, DMListContainer, UserAvatar, ScrollbarColor } from './style';\r\nimport { SocketContext } from '@store/socket';\r\n\r\nlet dmlist2: IDmList[] | undefined;\r\n\r\nconst DMLeftDrawerBar = () => {\r\n  const { data: dmlist } = useSWR<IDmList[]>('/api/dms/dmlist', fetcher);\r\n  const { data: users } = useSWR<IAllUser[]>('/api/users/alluser', fetcher);\r\n  const { data: blockList } = useSWR<IBlockList[]>(`/api/friend/blocklist`, fetcher);\r\n  // const { data: myData } = useSWR<IUser | null>('/api/users', fetcher);\r\n\r\n  const [selectedIndex, setSelectedIndex] = useState(0);\r\n  const [dmSearchInputValue, setDMSearchInputValue] = useState('');\r\n  const { onlineList, onGameList } = useContext(SocketContext);\r\n  let isState;\r\n\r\n  const handleListItemClick = useCallback(\r\n    (event: any, index: number) => {\r\n      setSelectedIndex(index);\r\n    },\r\n    [selectedIndex, setSelectedIndex],\r\n  );\r\n\r\n  const onChangeDMSearchInput = useCallback((e) => {\r\n    setDMSearchInputValue(e.target.value);\r\n  }, []);\r\n\r\n  if (dmSearchInputValue && dmSearchInputValue.indexOf('\\\\') === -1) {\r\n    dmlist2 = dmlist?.filter((dm) => {\r\n      const regex = new RegExp(dmSearchInputValue, 'gi');\r\n      return dm.username.match(regex);\r\n    });\r\n  }\r\n\r\n  const getDMList = useCallback(\r\n    (inputValue: string) => {\r\n      if (!inputValue) return dmlist;\r\n      else return dmlist2;\r\n    },\r\n    [dmlist],\r\n  );\r\n\r\n  return (\r\n    <DMLeftDrawerContainer>\r\n      <input\r\n        className=\"search-input\"\r\n        onChange={onChangeDMSearchInput}\r\n        value={dmSearchInputValue}\r\n        autoComplete=\"off\"\r\n      ></input>\r\n      <div className=\"friend-icon-wrapper\">\r\n        <Link to={`/social`}>\r\n          <List className=\"friend-list-wrapper\" component=\"nav\" aria-label=\"main mailbox folders\">\r\n            <ListItemButton\r\n              className=\"friend-list-btn\"\r\n              selected={selectedIndex === 0}\r\n              onClick={(event: any) => handleListItemClick(event, 0)}\r\n            >\r\n              <EmojiPeopleRoundedIcon className=\"friend-list-icon\" />\r\n              <ListItemText primary=\"Friends\" />\r\n            </ListItemButton>\r\n          </List>\r\n        </Link>\r\n      </div>\r\n      <DMListContainer>\r\n        <Scrollbars\r\n          autoHide\r\n          renderThumbVertical={({ style, ...props }) => <ScrollbarColor {...props} />}\r\n        >\r\n          <div>\r\n            {getDMList(dmSearchInputValue)?.map((dm: IDmList, index: number) => {\r\n              let isblock = false;\r\n              blockList?.map((blockedUser) => {\r\n                if (blockedUser.userId2 === dm.userId) isblock = true;\r\n              });\r\n              if (!isblock) {\r\n                return (\r\n                  <Link to={`/social/dm/${dm.id}`} key={dm.id}>\r\n                    <List className=\"list\" component=\"nav\" aria-label=\"main mailbox folders\">\r\n                      <ListItemButton\r\n                        className=\"list-item-button\"\r\n                        selected={selectedIndex === index + 1}\r\n                        onClick={(event: any) => handleListItemClick(event, index + 1)}\r\n                      >\r\n                        {users?.map((user: any) => {\r\n                          if (user.userId === dm.userId) {\r\n                            isState = 0;\r\n                            if (onGameList && onGameList[user.userId]) isState = 2;\r\n                            if (isState === 0) {\r\n                              onlineList?.map((onlineUser) => {\r\n                                if (onlineUser.userId === user.userId) isState = 1;\r\n                              });\r\n                            }\r\n                            return (\r\n                              <div className=\"user-avatar-id-wrapper\" key={dm.id}>\r\n                                <UserAvatar\r\n                                  isstate={`${\r\n                                    isState\r\n                                      ? isState === 1\r\n                                        ? '2px solid #1ed14b'\r\n                                        : '2px solid #FFD400'\r\n                                      : '2px solid #d63638'\r\n                                  }`}\r\n                                  src={user.profile}\r\n                                  alt=\"Avatar\"\r\n                                />\r\n                                <ListItemText className=\"user-id\" primary={user.username} />\r\n                              </div>\r\n                            );\r\n                          }\r\n                        })}\r\n                      </ListItemButton>\r\n                    </List>\r\n                  </Link>\r\n                );\r\n              }\r\n            })}\r\n          </div>\r\n        </Scrollbars>\r\n      </DMListContainer>\r\n    </DMLeftDrawerContainer>\r\n  );\r\n};\r\n\r\nexport default DMLeftDrawerBar;\r\n","import styled from '@emotion/styled';\r\nimport Box from '@mui/material/Box';\r\n\r\nexport const DMChatHeaderContainer = styled(Box)`\r\n\tflex-grow: 1;\r\n\r\n\t& .wrapper {\r\n\t\tposition: static;\r\n\t\tbackground-color: #272727;\r\n\t}\r\n\r\n\t& .user-profile-container {\r\n\t\tflex-grow: 1;\r\n\t}\r\n\r\n\t& .user-profile-wrapper {\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: row;\r\n\t\talign-items: center;\r\n\t\twhite-space: nowrap;\r\n\t}\r\n\r\n\t& .avatar {\r\n\t\twidth: 40px;\r\n\t\theight: 40px;\r\n\t\tleft: -10px;\r\n\t}\r\n\r\n\t& .challenge-btn {\r\n\t\tbackground-color: rgba(22, 120, 209, 0.8);\r\n\t\tcolor: white;\r\n\t\twidth: 160px;\r\n\t\theight: 35px;\r\n\t\tpadding: 0 16px;\r\n\t\tfont-weight: bold;\r\n\t}\r\n\r\n\t& .challenge-btn:hover\t {\r\n\t\tbackground-color: rgba(22, 120, 209, 1);\r\n\t}\r\n\r\n\r\n\t& .challenge-block-btn {\r\n\t\twidth: 160px;\r\n\t\theight: 35px;\r\n\t\tpadding: 0 16px;\r\n\t\tbackground-color: #393939;\r\n\t\tfont-weight: bold;\r\n\t}\r\n\t& .watch-btn {\r\n\t\twidth: 160px;\r\n\t\theight: 35px;\r\n\t\tbackground-color: rgba(255, 212, 0, 0.9);\r\n\t\tfont-weight: bold;\r\n\t}\r\n\r\n\t& .watch-btn:hover {\r\n\t\tbackground-color: rgba(255, 212, 0, 1);\r\n\r\n\t}\r\n\r\n`;","import React, { useCallback, useContext } from 'react';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport useSWR from 'swr';\r\nimport fetcher from '@utils/fetcher';\r\nimport { IAllUser, IUser } from '@typings/db';\r\nimport { useParams } from 'react-router-dom';\r\nimport GamepadIcon from '@mui/icons-material/Gamepad';\r\nimport axios from 'axios';\r\nimport config from '@utils/config';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { DMChatHeaderContainer } from './style';\r\nimport { toast } from 'react-toastify';\r\nimport { SocketContext } from '@store/socket';\r\nimport VisibilityIcon from '@mui/icons-material/Visibility';\r\n\r\nconst DMChatHeader = () => {\r\n  const { id } = useParams<{ id: string }>();\r\n  const { data: myData } = useSWR<IUser | null>('/api/users', fetcher);\r\n  const { data: userId } = useSWR<string>(`/api/dms/findDmUser/${id}`, fetcher);\r\n  const { data: alluser } = useSWR<IAllUser[]>('/api/users/alluser', fetcher);\r\n  const { onlineList, onGameList } = useContext(SocketContext);\r\n  const history = useHistory();\r\n  let isState = 0;\r\n\r\n  if (onGameList && userId && onGameList[userId]) isState = 2;\r\n\r\n  const onClickChallengeBtn = useCallback(\r\n    (e) => {\r\n      e.preventDefault();\r\n      axios\r\n        .post(`/api/dms/sendMessage/${userId}/3/0`, { message: '' }, config)\r\n        .then((res) => {\r\n          history.push(`/game/ping-pong/${res.data}`);\r\n        })\r\n        .catch((error) => {\r\n          if (error.response.data.data.message === 'Block 상태') {\r\n            toast.error('Cant challenge because you are blocked', {\r\n              autoClose: 4000,\r\n              position: toast.POSITION.TOP_RIGHT,\r\n              hideProgressBar: false,\r\n              closeOnClick: true,\r\n              pauseOnHover: true,\r\n              theme: 'colored',\r\n            });\r\n          } else {\r\n            toast.error(error.message, {\r\n              autoClose: 4000,\r\n              position: toast.POSITION.TOP_RIGHT,\r\n              hideProgressBar: false,\r\n              closeOnClick: true,\r\n              pauseOnHover: true,\r\n              theme: 'colored',\r\n            });\r\n          }\r\n        });\r\n    },\r\n    [userId, alluser],\r\n  );\r\n\r\n  const onClickWatchBtn = useCallback(\r\n    (e) => {\r\n      e.preventDefault();\r\n      if (onGameList && userId) history.push(`/game/ping-pong/${onGameList[userId]}`);\r\n    },\r\n    [onGameList],\r\n  );\r\n\r\n  return (\r\n    <DMChatHeaderContainer>\r\n      <AppBar className=\"wrapper\">\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" component=\"span\" className=\"user-profile-container\">\r\n            {alluser?.map((user) => {\r\n              if (user.userId == userId) {\r\n                return (\r\n                  <div className=\"user-profile-wrapper\" key={userId}>\r\n                    <Avatar className=\"avatar\" src={user.profile} alt=\"Avatar\" />\r\n                    <span>{user.username}</span>\r\n                  </div>\r\n                );\r\n              }\r\n            })}\r\n          </Typography>\r\n          {isState === 2 && onGameList && myData && onGameList[myData?.userId] === undefined ? (\r\n            <Button onClick={onClickWatchBtn} variant=\"contained\" className=\"watch-btn\">\r\n              WATCH&nbsp;\r\n              <VisibilityIcon />\r\n            </Button>\r\n          ) : onGameList && myData && onGameList[myData?.userId] ? (\r\n            <Button className=\"challenge-block-btn\" onClick={onClickChallengeBtn} disabled>\r\n              CHALLENGE&nbsp;\r\n              <GamepadIcon />\r\n            </Button>\r\n          ) : (\r\n            <Button className=\"challenge-btn\" onClick={onClickChallengeBtn}>\r\n              CHALLENGE&nbsp;\r\n              <GamepadIcon />\r\n            </Button>\r\n          )}\r\n        </Toolbar>\r\n      </AppBar>\r\n    </DMChatHeaderContainer>\r\n  );\r\n};\r\n\r\nexport default DMChatHeader;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const DMChatListContainer = styled.div`\r\n\tbackground: #1e1e1e;\r\n\twidth: 100%;\r\n\theight: 100%;\r\n\tpadding: 8px 0 8px 15px;\r\n\r\n\t& .chatList-wrapper {\r\n\t\tcolor: white; \r\n\t\tdisplay: flex;\r\n\t}\r\n\r\n\t& .chatList-profile-wrapper {\r\n\t\tmargin-right: 10px;\r\n\t}\r\n\r\n\t& .avatar {\r\n\t\twidth: 40px;\r\n\t\theight: 40px;\r\n\t\tmargin-bottom: 25px;\r\n\t}\r\n\r\n\t& .chat {\r\n\t\tmargin-top: 0;\r\n\t}\r\n\r\n  & .challenge-join-wrapper {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    width: 100%;\r\n  }\r\n\r\n  & .challenge-join-btn {\r\n    margin-right: 15px;\r\n    font-weight: 700;\r\n\r\n  }\r\n\r\n  & .challenge-join-block-btn {\r\n    margin-right: 15px;\r\n    font-weight: 700;\r\n\t\tbackground-color: #393939;\r\n  }\r\n`;\r\n\r\nexport const StickyHeader = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  flex: 1;\r\n  width: 100%;\r\n  position: sticky;\r\n  top: 14px;\r\n\r\n  & button {\r\n    font-weight: bold;\r\n    font-size: 13px;\r\n    height: 28px;\r\n\t\tcolor: white;\r\n    line-height: 27px;\r\n    padding: 0 16px;\r\n    z-index: 2;\r\n    --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\r\n    box-shadow: 0 0 0 1px var(--saf-0), 0 1px 3px 0 rgba(0, 0, 0, 0.08);\r\n    border-radius: 24px;\r\n    position: relative;\r\n    top: -13px;\r\n    background: #363636;\r\n    border: none;\r\n    outline: none;\r\n  }\r\n`;\r\n\r\nexport const ScrollbarColor = styled.div`\r\n  ...style;\r\n  background-color: #787c7f;\r\n  width: 8px;\r\n  border-radius: 5px;\r\n\r\n\t&:hover {\r\n\t\tbackground-color: white;\r\n\t}\r\n`;","import React, { useCallback, RefObject, VFC, useEffect, useContext } from 'react';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport { IChatList, IAllUser, IUser } from '@typings/db';\r\nimport fetcher from '@utils/fetcher';\r\nimport Scrollbars from 'react-custom-scrollbars';\r\nimport useSWR from 'swr';\r\nimport Button from '@mui/material/Button';\r\nimport { DMChatListContainer, StickyHeader, ScrollbarColor } from './style';\r\nimport { makeSectionDM } from '@utils/makeSection';\r\nimport { Link } from 'react-router-dom';\r\nimport { SocketContext } from '@store/socket';\r\n\r\ninterface Props {\r\n  chatData: IChatList[][] | undefined;\r\n  scrollbarRef: RefObject<Scrollbars>;\r\n  setSize: (f: (size: number) => number) => Promise<IChatList[][] | undefined>;\r\n  isReachingEnd: boolean;\r\n}\r\n\r\nconst DMChatList: VFC<Props> = ({ chatData, scrollbarRef, isReachingEnd, setSize }) => {\r\n  const { data: alluser } = useSWR<IAllUser[]>('/api/users/alluser', fetcher);\r\n  const { data: myData } = useSWR<IUser | null>('/api/users', fetcher);\r\n  const { onGameList } = useContext(SocketContext);\r\n  const onScroll = useCallback(\r\n    (values) => {\r\n      if (values.scrollTop === 0 && !isReachingEnd) {\r\n        setSize((prevSize) => {\r\n          return prevSize + 1;\r\n        }).then(() => {\r\n          if (scrollbarRef?.current) {\r\n            scrollbarRef.current?.scrollTop(\r\n              scrollbarRef.current?.getScrollHeight() - values.scrollHeight,\r\n            );\r\n          }\r\n        });\r\n      }\r\n    },\r\n    [setSize, isReachingEnd, scrollbarRef],\r\n  );\r\n\r\n  const chatSections = makeSectionDM(chatData ? chatData.flat().reverse() : []);\r\n  let username;\r\n\r\n  return (\r\n    <DMChatListContainer>\r\n      <Scrollbars\r\n        ref={scrollbarRef}\r\n        onScrollFrame={onScroll}\r\n        renderThumbVertical={({ style, ...props }) => <ScrollbarColor {...props} />}\r\n      >\r\n        {Object.entries(chatSections).map(([date, chats]) => {\r\n          return (\r\n            <div key={date}>\r\n              <StickyHeader>\r\n                <button>{date}</button>\r\n              </StickyHeader>\r\n              {chats?.map((chat, index) => {\r\n                username = '';\r\n                return (\r\n                  <div className=\"chatList-wrapper\" key={chat.message + index}>\r\n                    <div className=\"chatList-profile-wrapper\">\r\n                      {alluser?.map((user) => {\r\n                        if (user.userId === chat.userId1) {\r\n                          username = user.username;\r\n                          return (\r\n                            <Avatar\r\n                              className=\"avatar\"\r\n                              src={user.profile}\r\n                              alt=\"Avatar\"\r\n                              key={chat.message + index}\r\n                            />\r\n                          );\r\n                        }\r\n                      })}\r\n                    </div>\r\n                    {chat.match === 0 && (\r\n                      <div>\r\n                        <div>{username}</div>\r\n                        <p className=\"chat\">{chat.message}</p>\r\n                      </div>\r\n                    )}\r\n                    {(chat.match === 1 || chat.match === 3) && (\r\n                      <div className=\"challenge-join-wrapper\">\r\n                        <div>\r\n                          <div>{username}</div>\r\n                          <p className=\"chat\">{chat.message}</p>\r\n                        </div>\r\n                        {onGameList && myData && onGameList[myData?.userId] ? (\r\n                          <Button className=\"challenge-join-block-btn\" variant=\"contained\" disabled>\r\n                            JOIN\r\n                          </Button>\r\n                        ) : (\r\n                          <Link to={`/game/ping-pong/${chat.historyId}`}>\r\n                            <Button className=\"challenge-join-btn\" variant=\"contained\">\r\n                              JOIN\r\n                            </Button>\r\n                          </Link>\r\n                        )}\r\n                      </div>\r\n                    )}\r\n                    {chat.match === 2 && (\r\n                      <div className=\"challenge-join-wrapper\">\r\n                        <div>\r\n                          <div>{username}</div>\r\n                          <p className=\"chat\">{chat.message}</p>\r\n                        </div>\r\n                        <Link to={`/game/history/${chat.historyId}`}>\r\n                          <Button className=\"challenge-join-btn\" variant=\"contained\">\r\n                            HISTORY\r\n                          </Button>\r\n                        </Link>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          );\r\n        })}\r\n      </Scrollbars>\r\n    </DMChatListContainer>\r\n  );\r\n};\r\n\r\nexport default DMChatList;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const DirectMessageContainer = styled.div`\r\n\twidth: 100%;\r\n\theight: 100vh;\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n`;","import ChatBox from '@components/ChatBox';\r\nimport ChatHeader from '@components/DMChatHeader';\r\nimport DMChatList from '@components/DMChatList';\r\nimport { AutoFixOffSharp } from '@mui/icons-material';\r\nimport { IChatList, IDmList, IUser } from '@typings/db';\r\nimport fetcher from '@utils/fetcher';\r\nimport axios from 'axios';\r\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\r\nimport Scrollbars from 'react-custom-scrollbars';\r\nimport useSWR from 'swr';\r\nimport useSWRInfinite from 'swr/infinite';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\nimport getSocket from '@utils/useSocket';\r\nimport config from '@utils/config';\r\nimport { DirectMessageContainer } from './style';\r\nimport { toast } from 'react-toastify';\r\nimport { useMediaQuery } from 'react-responsive';\r\nimport DMLeftDrawer from '@components/DMLeftDrawer';\r\n\r\nconst DirectMessage = () => {\r\n  const [chat, setChat] = useState('');\r\n  const { id } = useParams<{ id: string }>();\r\n  const { data: myData } = useSWR<IUser | null>('/api/users', fetcher);\r\n  const { data: userId } = useSWR<string>(`/api/dms/findDmUser/${id}`, fetcher);\r\n  const { data: myDMList } = useSWR<IDmList[]>(`/api/dms/dmlist`, fetcher);\r\n  const [messageRevalidate, setMessageRevalidate] = useState(false);\r\n  const isMobile = useMediaQuery({ maxWidth: 700 });\r\n  const isMobileHeader = useMediaQuery({ maxWidth: 420 });\r\n\r\n  // const { data: chatData, mutate: mutateChat } = useSWR<IChatList[]>(\r\n  //   `/api/dms/getAllMessageUseDmId/${id}`,\r\n  //   fetcher,\r\n  // );\r\n  const {\r\n    data: chatData,\r\n    mutate: mutateChat,\r\n    setSize,\r\n  } = useSWRInfinite<IChatList[]>(\r\n    (index) => `/api/dms/get20MessageUseDmId/${id}/${index + 1}`,\r\n    fetcher,\r\n  );\r\n\r\n  const history = useHistory();\r\n  const isEmpty = chatData?.[0]?.length === 0;\r\n  const isReachingEnd =\r\n    isEmpty || (chatData && chatData[chatData.length - 1]?.length < 20) || false;\r\n  const scrollbarRef = useRef<Scrollbars>(null);\r\n  const socket = getSocket();\r\n\r\n  const onSubmitChat = useCallback(() => {\r\n    if (chat?.trim() && chatData) {\r\n      mutateChat((prevChatData) => {\r\n        prevChatData?.[0].unshift({\r\n          id: prevChatData[0][0].id + 1,\r\n          dmId: parseInt(id),\r\n          userId1: myData?.userId,\r\n          userId2: userId,\r\n          message: chat,\r\n          match: 0,\r\n          createdAt: new Date(),\r\n          updatedAt: new Date(),\r\n          historyId: 0,\r\n        });\r\n        return prevChatData;\r\n      }, false);\r\n      axios\r\n        .post(\r\n          `/api/dms/sendMessage/${userId}/0/0`,\r\n          {\r\n            message: chat,\r\n          },\r\n          config,\r\n        )\r\n        .catch((error) => {\r\n          if (error.response.data.data.message === 'Block 상태') {\r\n            toast.error(' Cant send message because it is blocked', {\r\n              autoClose: 4000,\r\n              position: toast.POSITION.TOP_RIGHT,\r\n              hideProgressBar: false,\r\n              closeOnClick: true,\r\n              pauseOnHover: true,\r\n              theme: 'colored',\r\n            });\r\n          } else {\r\n            toast.error(error.message, {\r\n              autoClose: 4000,\r\n              position: toast.POSITION.TOP_RIGHT,\r\n              hideProgressBar: false,\r\n              closeOnClick: true,\r\n              pauseOnHover: true,\r\n              theme: 'colored',\r\n            });\r\n          }\r\n          mutateChat();\r\n        });\r\n      setChat('');\r\n      setTimeout(() => {\r\n        scrollbarRef.current?.scrollToBottom();\r\n      }, 50);\r\n    }\r\n  }, [chat]);\r\n\r\n  const onMessage = useCallback(\r\n    (data) => {\r\n      if (data.userId1 != myData?.userId) {\r\n        mutateChat((prevchatData) => {\r\n          prevchatData?.[0].unshift(data);\r\n\r\n          return prevchatData;\r\n        }, false).then(() => {\r\n          setMessageRevalidate((prev) => !prev);\r\n          if (scrollbarRef.current) {\r\n            if (\r\n              scrollbarRef.current.getScrollHeight() <\r\n              scrollbarRef.current.getClientHeight() + scrollbarRef.current.getScrollTop() + 150\r\n            ) {\r\n              setTimeout(() => {\r\n                scrollbarRef.current?.scrollToBottom();\r\n              }, 50);\r\n            }\r\n          }\r\n        });\r\n      }\r\n    },\r\n    [myData, scrollbarRef],\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (myDMList) {\r\n      let isUnauthorized = true;\r\n      for (let item of myDMList) {\r\n        if (item.id === parseInt(id)) {\r\n          isUnauthorized = false;\r\n          break;\r\n        }\r\n      }\r\n      if (isUnauthorized) {\r\n        history.push('/home');\r\n      }\r\n    }\r\n  }, [myDMList]);\r\n\r\n  useEffect(() => {\r\n    socket?.on('dm', onMessage);\r\n    return () => {\r\n      socket?.off('dm');\r\n    };\r\n  }, [socket, onMessage]);\r\n\r\n  useEffect(() => {\r\n    if (chatData?.length === 1) {\r\n      scrollbarRef.current?.scrollToBottom();\r\n    }\r\n  }, [chatData]);\r\n\r\n  return (\r\n    <>\r\n      {isMobile ? null : <DMLeftDrawer />}\r\n      <DirectMessageContainer>\r\n        {isMobileHeader ? null : <ChatHeader />}\r\n\r\n        <DMChatList\r\n          chatData={chatData}\r\n          scrollbarRef={scrollbarRef}\r\n          isReachingEnd={isReachingEnd}\r\n          setSize={setSize}\r\n        />\r\n        <ChatBox chat={chat} setChat={setChat} onSubmitChat={onSubmitChat} />\r\n      </DirectMessageContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DirectMessage;\r\n","import { IChatList, IChannelChatList } from '@typings/db';\r\nimport customParseFormat from 'dayjs/plugin/customParseFormat'\r\nimport dayjs from 'dayjs';\r\ndayjs.extend(customParseFormat);\r\n\r\nconst days = ['일요일', '월요일', '화요일', '수요일', '목요일', '금요일', '토요일'];\r\n\r\nexport function makeSectionDM(chatList: IChatList[]) {\r\n\tconst sections: { [key: string]: IChatList[] } = {};\r\n\tchatList.forEach((chat) => {\r\n\t\tlet monthData = dayjs(chat.createdAt).format('YYYY-MM-DD');\r\n\t\tmonthData += ' ' + days[dayjs(chat.createdAt).day()];\r\n\t\tif (Array.isArray(sections[monthData]))\r\n\t\t\tsections[monthData].push(chat);\r\n\t\telse\r\n\t\t\tsections[monthData] = [chat];\r\n\t})\r\n\treturn sections;\r\n}\r\n\r\nexport function makeSectionChannel(chatList: IChannelChatList[]) {\r\n\tconst sections: { [key: string]: IChannelChatList[] } = {};\r\n\tchatList.forEach((chat) => {\r\n\t\tlet monthData = dayjs(chat.updatedAt).format('YYYY-MM-DD');\r\n\t\tmonthData += ' ' + days[dayjs(chat.updatedAt).day()];\r\n\t\tif (Array.isArray(sections[monthData]))\r\n\t\t\tsections[monthData].push(chat);\r\n\t\telse\r\n\t\t\tsections[monthData] = [chat];\r\n\t})\r\n\treturn sections;\r\n}"],"names":["ChatBoxContainer","styled","chat","onSubmitChat","setChat","useState","chatBoxChat","setChatBoxChat","onChangeChatBoxChat","useCallback","e","target","value","useEffect","onSubmitChatBoxChat","preventDefault","className","onChange","onClick","Send","dmlist2","DMLeftDrawerContainer","DMListContainer","UserAvatar","Avatar","props","isstate","ScrollbarColor","isState","dmlist","useSWR","fetcher","data","users","blockList","selectedIndex","setSelectedIndex","dmSearchInputValue","setDMSearchInputValue","useContext","SocketContext","onlineList","onGameList","handleListItemClick","event","index","onChangeDMSearchInput","indexOf","filter","dm","regex","RegExp","username","match","getDMList","inputValue","autoComplete","to","List","component","ListItemButton","selected","EmojiPeopleRounded","ListItemText","primary","autoHide","renderThumbVertical","style","map","isblock","blockedUser","userId2","userId","id","key","user","onlineUser","src","profile","alt","DMChatHeaderContainer","Box","useParams","myData","alluser","history","useHistory","onClickChallengeBtn","axios","message","config","then","res","push","catch","error","response","toast","autoClose","position","hideProgressBar","closeOnClick","pauseOnHover","theme","onClickWatchBtn","AppBar","Toolbar","Typography","variant","undefined","Button","Visibility","disabled","Gamepad","DMChatListContainer","StickyHeader","chatData","scrollbarRef","isReachingEnd","setSize","onScroll","values","scrollTop","prevSize","current","getScrollHeight","scrollHeight","chatSections","makeSectionDM","flat","reverse","ref","onScrollFrame","Object","entries","date","chats","userId1","historyId","DirectMessageContainer","myDMList","setMessageRevalidate","isMobile","useMediaQuery","maxWidth","isMobileHeader","useSWRInfinite","mutateChat","mutate","length","useRef","socket","getSocket","trim","prevChatData","unshift","dmId","parseInt","createdAt","Date","updatedAt","setTimeout","scrollToBottom","onMessage","prevchatData","prev","getClientHeight","getScrollTop","isUnauthorized","on","off","DMLeftDrawer","ChatBox","dayjs","customParseFormat","days","chatList","sections","forEach","monthData","format","day","Array","isArray","makeSectionChannel"],"sourceRoot":""}