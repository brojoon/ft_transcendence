{"version":3,"file":"658.js","mappings":"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","sources":["webpack://brojoon/./components/ChannelHeader/style.ts","webpack://brojoon/./components/ChannelHeader/index.tsx","webpack://brojoon/./components/ChannelLeftDrawBar/style.ts","webpack://brojoon/./components/ChannelLeftDrawBar/index.tsx","webpack://brojoon/./components/ProtectedRoomModal/style.ts","webpack://brojoon/./components/ProtectedRoomModal/index.tsx","webpack://brojoon/./components/ChannelBody/style.ts","webpack://brojoon/./components/ChannelBody/index.tsx","webpack://brojoon/./pages/ChannelDiscover/style.ts","webpack://brojoon/./pages/ChannelDiscover/index.tsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport Box from '@mui/material/Box';\n\nexport const ChannelHeaderContainer = styled(Box)`\n\twidth: 100%;\n\n\t& .app-bar {\n\t\tbackground-color: #272727;\n\t}\n\n\t& .header-text {\n\t\tflex-grow: 1;\n\t}\n`;","import React, { VFC } from 'react';\nimport AppBar from '@mui/material/AppBar';\nimport Box from '@mui/material/Box';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport { ChannelHeaderContainer } from './style';\n\nimport { useParams } from 'react-router-dom';\n\ninterface Props {\n  content: string;\n}\n\nconst ChannelHeader: VFC<Props> = ({ content }) => {\n  const { id } = useParams<{ id: string }>();\n\n  return (\n    <>\n      <ChannelHeaderContainer>\n        <AppBar className=\"app-bar\" position=\"static\">\n          <Toolbar>\n            <Typography className=\"header-text\" variant=\"h6\" component=\"div\">\n              {content}\n            </Typography>\n          </Toolbar>\n        </AppBar>\n      </ChannelHeaderContainer>\n    </>\n  );\n};\n\nexport default ChannelHeader;\n","import styled from '@emotion/styled';\n\nexport const ChannelLeftDrawBarContainer = styled.div`\n\twidth: 280px;\n\theight: 100%;\n\tpadding: 30px 15px;\n\tbackground-color: #353636;\n\tborder-right: 1px solid #4f4f4f;\n\toverflow: hidden;\n\n\t& .search-input {\n\t\twidth: 100%;\n\t\toutline: none;\n\t\tresize: none;\n\t\tborder-radius: 4px;\n\t\tbackground: #bdbdbd;\n\t\tfont-size: 16px;\n\t\tfont-weight: bold;\n\t\tfont-family: monospace;\n\t\tcolor: black;\n\t\tborder: none;\n\t\tpadding: 0 15px;\n\t\theight: 40px;\n\t}\n\n\n\t& .header-wrapper {\n\t\tborder-top: 1px solid #4f4f4f;\n\t\tborder-bottom: 1px solid #4f4f4f;\n\t\tmargin: 10px 0;\n\t\tpadding: 14px 0 0;\n\t\theight: 80px;\n\t}\n\n\t& .channel-discover-wrapper {\n\t\tpadding: 0;\n\t\tmargin: 0;\n\t}\n\n\t& .channel-discover-wrapper:hover {\n\t\tbackground-color: rgba(74,75,84,0.7);\n\t}\n\n\t& .fireicon {\n\t\tmargin-right: 15px;\n\t}\n\n\t& .channel-discover-btn {\n\t\tcolor: white;\n\t}\n\n\t& .channel-list-wrapper {\n\t\theight: 70%;\n\t}\n\n\t& .channel-list {\n\t\tpadding: 0;\n\t\tmargin: 0;\n\t}\n\n\t& .channel-list:hover {\n\t\tbackground-color: rgba(74,75,84,0.7);\n\t}\n\n\t& .css-cvhtoe-MuiButtonBase-root-MuiListItemButton-root.Mui-selected {\n\t\tbackground-color: #666666 !important;\n\t}\n\n\t& .channel-list-btn {\n\t\tpadding: 0;\n\t\tmargin: 0;\n\t}\n\n\t& .channel-list-text {\n\t\tcolor: white;\n\t\tmargin: 4px 0 4px 18px\n\t}\n\n\n\t\n\t& .footer {\n\t\tdisplay: flex;\n\t\tjustify-content: center;\n\t\talign-items: center;\n\t\theight: 11%;\n\t}\n\n\t& .create-btn {\n\t\twidth: 180px;\n\t\theight: 35px;\n\t\tbackground-color: #597aff;\n\t\tborder-color: #597aff;\n\t\tfont-weight: bold;\n\t}\n\t\n\t\n\t& .css-cvhtoe-MuiButtonBase-root-MuiListItemButton-root.Mui-selected {\n\t\tbackground-color: #666666;\n\t}\n`;\n\nexport const ScrollbarColor = styled.div`\n  ...style;\n  background-color: #787c7f;\n  width: 8px;\n  border-radius: 5px;\n\n\t&:hover {\n\t\tbackground-color: white;\n\t}\n`;","import React, { useCallback, useState } from 'react';\nimport ListItemText from '@mui/material/ListItemText';\nimport Scrollbars from 'react-custom-scrollbars';\nimport List from '@mui/material/List';\nimport { IUser, IAllUser, IDmList, IChannelList } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport useSWR from 'swr';\nimport { Link } from 'react-router-dom';\nimport Button from '@mui/material/Button';\n\nimport ListItemButton from '@mui/material/ListItemButton';\nimport FlareIcon from '@mui/icons-material/Flare';\nimport { ChannelLeftDrawBarContainer, ScrollbarColor } from './style';\n\nlet channelList2: IChannelList[] | undefined;\n\nconst ChannelLeftDrawBar = () => {\n  const { data: users } = useSWR<IAllUser[]>('/api/users/alluser', fetcher);\n  const { data: channelList } = useSWR<IChannelList[]>('/api/channels/myChannelList', fetcher);\n  const { data: myData } = useSWR<IUser | null>('/api/users', fetcher);\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const [channelSearchInputValue, setChannelSearchInputValue] = useState('');\n\n  const handleListItemClick = useCallback(\n    (event: any, index: number) => {\n      setSelectedIndex(index);\n    },\n    [selectedIndex, setSelectedIndex],\n  );\n\n  const onChangeChannelSearchInput = useCallback((e) => {\n    setChannelSearchInputValue(e.target.value);\n  }, []);\n\n  if (channelSearchInputValue && channelSearchInputValue.indexOf('\\\\') === -1) {\n    channelList2 = channelList?.filter((channel) => {\n      const regex = new RegExp(channelSearchInputValue, 'gi');\n      return channel.name.match(regex);\n    });\n  }\n\n  const getChannelList = useCallback(\n    (inputValue: string) => {\n      if (!inputValue) return channelList;\n      else return channelList2;\n    },\n    [channelList],\n  );\n\n  return (\n    <ChannelLeftDrawBarContainer>\n      <input\n        className=\"search-input\"\n        autoComplete=\"off\"\n        onChange={onChangeChannelSearchInput}\n        value={channelSearchInputValue}\n      ></input>\n      <div className=\"header-wrapper\">\n        <Link to={`/channels`}>\n          <List\n            className=\"channel-discover-wrapper\"\n            component=\"nav\"\n            aria-label=\"main mailbox folders\"\n          >\n            <ListItemButton\n              className=\"channel-discover-btn\"\n              selected={selectedIndex === 0}\n              onClick={(event) => handleListItemClick(event, 0)}\n            >\n              <FlareIcon className=\"fireicon\" />\n              <ListItemText primary=\"Discover\" />\n            </ListItemButton>\n          </List>\n        </Link>\n      </div>\n      <div className=\"channel-list-wrapper\">\n        <Scrollbars\n          autoHide\n          renderThumbVertical={({ style, ...props }) => <ScrollbarColor {...props} />}\n        >\n          {getChannelList(channelSearchInputValue)?.map((channel: any, index) => {\n            let channelMode = '';\n            if (channel.type === 0) {\n              channelMode = 'Public';\n            } else if (channel.type === 1) {\n              channelMode = 'Protected';\n            } else if (channel.type === 2) {\n              channelMode = 'Private';\n            }\n            return (\n              <Link to={`/channels/${channel.id}`} key={channel.id}>\n                <List className=\"channel-list\" component=\"nav\" aria-label=\"main mailbox folders\">\n                  <ListItemButton\n                    className=\"channel-list-btn\"\n                    selected={selectedIndex === index + 1}\n                    onClick={(event) => handleListItemClick(event, index + 1)}\n                  >\n                    <ListItemText\n                      className=\"channel-list-text\"\n                      primary={channel.name}\n                      secondary={channelMode}\n                    />\n                  </ListItemButton>\n                </List>\n              </Link>\n            );\n          })}\n        </Scrollbars>\n      </div>\n      <div className=\"footer\">\n        <Link to={`/channels/create`}>\n          <Button className=\"create-btn\" variant=\"contained\">\n            CREATE&nbsp;&nbsp;+\n          </Button>\n        </Link>\n      </div>\n    </ChannelLeftDrawBarContainer>\n  );\n};\n\nexport default ChannelLeftDrawBar;\n","import styled from '@emotion/styled';\n\nexport const ProtectedRoomModalBack = styled.div`\n\tcolor: white;\n\tposition: fixed;\n\tleft: 0;\n\ttop: 0;\n\tright: 0;\n\tbottom: 0;\n\tz-index: 2000;\n\tbackground-color: rgba(30, 30, 030, 0.5);\n`;\n\nexport const ProtectedRoomModalContainer = styled.div`\n\tposition: fixed;\n\ttop: 50%;\n\tleft: 50%;\n\twidth: 500px;\n\theight: 180px;\n\tbackground-color: #1e1e1e;\n\tcolor: #979797;\n\topacity: 1;\n\tborder: 1px solid #1e1e1e;\n\tborder-radius: 3px;\n\tpadding: 10px 20px 10px 20px;\n\tz-index: 3000;\n\ttransform: translate(-50%, -50%);\n\tboxShadow:\n\t\t0 3px 1px -2px rgb(0 0 0 / 20%), 0 2px 2px 0 rgb(0 0 0 / 14%), 0 1px 5px 0 rgb(0 0 0 / 12%);\n\n\t& .header {\n\t\tdisplay: flex;\n\t\tcolor: white;\n\t\tjustify-content: space-between;\n\t}\n\n\t& .close-icon {\n\t\tcolor: white;\n\t}\n\n\t& .body {\n\t\tdisplay: flex;\n\t}\n\n\t& .form-control {\n\t\twidth: 100%;\n\t\tcolor: white;\n\t\tmargin-top: 15px;\n\t}\n\n\t& .input-label {\n\t\tcolor: white;\n\t}\n\n\t& .visibility-icon {\n\t\tcolor: white;\n\t}\n\n\t& .join-btn {\n\t\twidth: 120px;\n\t\theight: 45px;\n\t\tbackground-color: #597aff;\n\t\tborder-color: #597aff;\n\t\tfont-weight: bold;\n\t\tmargin: 20px 0 0 10px;\n\t}\n\n\t& .password-error-text {\n\t\tcolor: red;\n\t\tfont-weight: 600;\n\t}\n\n\t& .css-1480iag-MuiInputBase-root-MuiInput-root {\n\t\tcolor: white;\n\t}\n\n\t& .css-1480iag-MuiInputBase-root-MuiInput-root:before {\n\t\tborder-bottom: 1px solid rgba(255, 255, 255, 0.6);\n\t}\n\n\t& .css-1480iag-MuiInputBase-root-MuiInput-root:hover:not(.Mui-disabled):before {\n\t\tborder-bottom: 1px solid rgba(255, 255, 255, 1);\n\n\t}\n`;","import React, { VFC, useCallback, useState } from 'react';\nimport CloseIcon from '@mui/icons-material/Close';\nimport IconButton from '@mui/material/IconButton';\nimport Input from '@mui/material/Input';\nimport InputLabel from '@mui/material/InputLabel';\nimport Button from '@mui/material/Button';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport FormControl from '@mui/material/FormControl';\nimport VisibilityOff from '@mui/icons-material/VisibilityOff';\nimport Visibility from '@mui/icons-material/Visibility';\nimport axios from 'axios';\nimport { useHistory } from 'react-router-dom';\nimport useSWR from 'swr';\nimport { IChannelList } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport config from '@utils/config';\nimport { ProtectedRoomModalBack, ProtectedRoomModalContainer } from './style';\nimport { toast } from 'react-toastify';\n\ninterface Props {\n  channelPasswordModal: boolean;\n  setChannelPasswordModal: any;\n  channelPasswordRoomNumber: string;\n  setChannelPasswordRoomNumber: any;\n}\n\nconst ProtectedRoomModal: VFC<Props> = ({\n  channelPasswordModal,\n  setChannelPasswordModal,\n  channelPasswordRoomNumber,\n  setChannelPasswordRoomNumber,\n}) => {\n  const { data: myChannelList, mutate: mutateChannelList } = useSWR<IChannelList[]>(\n    '/api/channels/myChannelList',\n    fetcher,\n  );\n  const { data: allChannelList, mutate: mutateAllChannelList } = useSWR<IChannelList[]>(\n    `/api/channels/allChannelList`,\n    fetcher,\n  );\n  const [PasswordValues, setPasswordValues] = useState({\n    password: '',\n    showPassword: false,\n  });\n  const [passwordError, setPasswordError] = useState(false);\n\n  const history = useHistory();\n\n  const handleClickShowPassword = useCallback(() => {\n    setPasswordValues({\n      ...PasswordValues,\n      showPassword: !PasswordValues.showPassword,\n    });\n  }, [PasswordValues, setPasswordValues]);\n  const handleChange = useCallback(\n    (prop: any) => (event: any) => {\n      setPasswordValues({ ...PasswordValues, [prop]: event.target.value });\n      setPasswordError(false);\n    },\n    [PasswordValues, setPasswordValues, passwordError, setPasswordError],\n  );\n  const handleMouseDownPassword = useCallback((event: any) => {\n    event.preventDefault();\n  }, []);\n\n  const onClickModalClose = useCallback(\n    (e) => {\n      e.preventDefault();\n      setChannelPasswordModal(false);\n      setPasswordValues({\n        password: '',\n        showPassword: false,\n      });\n    },\n    [channelPasswordModal, setChannelPasswordModal],\n  );\n\n  const onSubmitPassword = useCallback(\n    (e) => {\n      e.preventDefault();\n      axios\n        .post(\n          `/api/channels/join/${channelPasswordRoomNumber}`,\n          {\n            password: PasswordValues.password,\n          },\n          config,\n        )\n        .then((response) => {\n          setPasswordValues({\n            password: '',\n            showPassword: false,\n          });\n          setChannelPasswordModal(false);\n          mutateAllChannelList();\n          mutateChannelList().then(() => {\n            history.push(`/channels/${channelPasswordRoomNumber}`);\n          });\n          setChannelPasswordRoomNumber('');\n        })\n        .catch((error) => {\n          if (error.response.data.data.message === '아이디 혹은 비밀번호가 틀림')\n            setPasswordError(true);\n          else {\n            toast.error(error.message, {\n              autoClose: 3000,\n              position: toast.POSITION.TOP_RIGHT,\n              hideProgressBar: false,\n              closeOnClick: true,\n              pauseOnHover: true,\n              theme: 'colored',\n            });\n          }\n        });\n    },\n    [PasswordValues, channelPasswordModal, channelPasswordRoomNumber, passwordError],\n  );\n  return (\n    <>\n      <ProtectedRoomModalBack onClick={onClickModalClose}></ProtectedRoomModalBack>\n      <ProtectedRoomModalContainer>\n        <div className=\"header\">\n          <h2>Unlock channel access password</h2>\n          <IconButton className=\"close-icon\" aria-label=\"close\" onClick={onClickModalClose}>\n            <CloseIcon />\n          </IconButton>\n        </div>\n        <div className=\"body\">\n          <FormControl className=\"form-control\" variant=\"standard\">\n            <InputLabel htmlFor=\"standard-adornment-password\" className=\"input-label\">\n              What is the password?\n            </InputLabel>\n            <Input\n              id=\"standard-adornment-password\"\n              type={PasswordValues.showPassword ? 'text' : 'password'}\n              value={PasswordValues.password}\n              onChange={handleChange('password')}\n              endAdornment={\n                <InputAdornment position=\"end\">\n                  <IconButton\n                    className=\"visibility-icon \"\n                    aria-label=\"toggle password visibility\"\n                    onClick={handleClickShowPassword}\n                    onMouseDown={handleMouseDownPassword}\n                  >\n                    {PasswordValues.showPassword ? <VisibilityOff /> : <Visibility />}\n                  </IconButton>\n                </InputAdornment>\n              }\n            />\n          </FormControl>\n          <Button className=\"join-btn\" onClick={onSubmitPassword} variant=\"contained\">\n            JOIN\n          </Button>\n        </div>\n        {passwordError && <span className=\"password-error-text\">Password is wrong</span>}\n      </ProtectedRoomModalContainer>\n    </>\n  );\n};\n\nexport default ProtectedRoomModal;\n","import styled from '@emotion/styled';\nimport Box from '@mui/material/Box';\nimport Card from '@mui/material/Card';\nimport Typography from '@mui/material/Typography';\n\n\nexport const ChannelBodyContainer = styled(Box)`\n\tbackground-color: #121212;\n\tpadding: 15px 8px 15px 15px;\n\twidth: 100%;\n\theight: calc(100% - 64px);\n\n\t& .grid-container {\n\t\twidth: 100%;\n\t}\n`;\n\nexport const ScrollbarColor = styled.div`\n  ...style;\n  background-color: #787c7f;\n  width: 8px;\n  border-radius: 5px;\n\n\t&:hover {\n\t\tbackground-color: white;\n\t}\n`;\n\nexport const ChannelCard = styled(Card) <{ ismobile: boolean }>`\n\tbackground-color: #1e1e1e;\n\twidth: ${(props) => { return props.ismobile ? '95%' : '100%' }};\n\tcolor: white;\n`;\n\nexport const ChannelName = styled(Typography)`\n\tdisplay:flex;\n\tjustify-content: space-between;\n`;\n\n","import React, { VFC, useCallback, useState } from 'react';\nimport { styled } from '@mui/material/styles';\nimport Paper from '@mui/material/Paper';\nimport Grid from '@mui/material/Grid';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport Typography from '@mui/material/Typography';\nimport { CardActionArea } from '@mui/material';\nimport Scrollbars from 'react-custom-scrollbars';\nimport useSWR from 'swr';\nimport { IChannelList } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport { Link, useHistory, useParams } from 'react-router-dom';\nimport LockIcon from '@mui/icons-material/Lock';\nimport axios from 'axios';\nimport ProtectedRoomModal from '@components/ProtectedRoomModal';\nimport config from '@utils/config';\nimport { ChannelBodyContainer, ScrollbarColor, ChannelCard, ChannelName } from './style';\nimport { toast } from 'react-toastify';\nimport { useMediaQuery } from 'react-responsive';\n\nconst ChannelBody = () => {\n  const { data: allChannelList, mutate: mutateAllChannelList } = useSWR<IChannelList[]>(\n    `/api/channels/allChannelList`,\n    fetcher,\n  );\n  const { data: myChannelList, mutate: mutateMyChannelList } = useSWR<IChannelList[]>(\n    `/api/channels/myChannelList`,\n    fetcher,\n  );\n  const [channelPasswordModal, setChannelPasswordModal] = useState(false);\n  const [channelPasswordRoomNumber, setChannelPasswordRoomNumber] = useState('');\n  const history = useHistory();\n  const isMobile = useMediaQuery({ maxWidth: 420 });\n  const onClickPublicRoom = useCallback((channelId, e) => {\n    e.preventDefault();\n    axios\n      .post(\n        `/api/channels/join/${channelId}`,\n        {\n          password: '',\n        },\n        config,\n      )\n      .then(() => {\n        mutateAllChannelList();\n        mutateMyChannelList().then(() => {\n          history.push(`/channels/${channelId}`);\n        });\n      })\n      .catch((error) => {\n        if (error.response.data.code === 403) {\n          toast.error('This room is not accessible', {\n            autoClose: 3000,\n            position: toast.POSITION.TOP_RIGHT,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            theme: 'colored',\n          });\n        } else {\n          toast.error(error.message, {\n            autoClose: 3000,\n            position: toast.POSITION.TOP_RIGHT,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            theme: 'colored',\n          });\n        }\n      });\n  }, []);\n\n  const onClickProtectedRoom = useCallback(\n    (roomNumber, e) => {\n      e.preventDefault();\n      setChannelPasswordModal(true);\n      setChannelPasswordRoomNumber(roomNumber);\n    },\n    [\n      channelPasswordModal,\n      setChannelPasswordModal,\n      channelPasswordRoomNumber,\n      setChannelPasswordRoomNumber,\n    ],\n  );\n  return (\n    <ChannelBodyContainer sx={{ flexGrow: 1 }}>\n      <Scrollbars renderThumbVertical={({ style, ...props }) => <ScrollbarColor {...props} />}>\n        <Grid className=\"grid-container\" container spacing={3}>\n          {channelPasswordModal ? (\n            <ProtectedRoomModal\n              channelPasswordModal={channelPasswordModal}\n              setChannelPasswordModal={setChannelPasswordModal}\n              channelPasswordRoomNumber={channelPasswordRoomNumber}\n              setChannelPasswordRoomNumber={setChannelPasswordRoomNumber}\n            />\n          ) : null}\n          {allChannelList?.map((Channel: IChannelList) => {\n            let flag = false;\n            myChannelList?.forEach((myChannel) => {\n              if (myChannel.id === Channel.id) {\n                flag = true;\n                return null;\n              }\n            });\n            if (flag) return null;\n            if (Channel.type === 2) {\n              return null;\n            } else if (Channel.type === 0) {\n              return (\n                <Grid item xs={12} sm={12} md={6} key={Channel.id}>\n                  <ChannelCard\n                    ismobile={isMobile}\n                    className=\"card\"\n                    onClick={(e) => {\n                      onClickPublicRoom(Channel.id, e);\n                    }}\n                  >\n                    <CardActionArea>\n                      <CardContent>\n                        <ChannelName>\n                          <span>{Channel.name}</span>\n                        </ChannelName>\n                        <Typography variant=\"body2\" color=\"hsla(0,0%,100%,.7)\">\n                          {Channel.authId}\n                        </Typography>\n                      </CardContent>\n                    </CardActionArea>\n                  </ChannelCard>\n                </Grid>\n              );\n            } else if (Channel.type === 1) {\n              return (\n                <Grid item xs={12} sm={12} md={6} key={Channel.id}>\n                  <ChannelCard\n                    ismobile={isMobile}\n                    className=\"card\"\n                    onClick={(e) => {\n                      onClickProtectedRoom(Channel.id, e);\n                    }}\n                  >\n                    <CardActionArea>\n                      <CardContent>\n                        <ChannelName>\n                          <span>{Channel.name}</span>\n                          <span>{<LockIcon />}</span>\n                        </ChannelName>\n                        <Typography variant=\"body2\" color=\"hsla(0,0%,100%,.7)\">\n                          {Channel.authId}\n                        </Typography>\n                      </CardContent>\n                    </CardActionArea>\n                  </ChannelCard>\n                </Grid>\n              );\n            }\n          })}\n        </Grid>\n      </Scrollbars>\n    </ChannelBodyContainer>\n  );\n};\n\nexport default ChannelBody;\n","import styled from '@emotion/styled';\n\nexport const ChannelDiscoverContainer = styled.div`\n\twidth: 100%;\n`;","import ChannelBody from '@components/ChannelBody';\nimport ChannelHeader from '@components/ChannelHeader';\nimport React, { VFC } from 'react';\nimport { ChannelDiscoverContainer } from './style';\nimport ChannelLeftDrawBar from '@components/ChannelLeftDrawBar';\nimport { useMediaQuery } from 'react-responsive';\n\nconst ChannelDiscover = () => {\n  return (\n    <>\n      <ChannelLeftDrawBar />\n      <ChannelDiscoverContainer>\n        <ChannelHeader content={'Discover some channels'} />\n        <ChannelBody />\n      </ChannelDiscoverContainer>\n    </>\n  );\n};\n\nexport default ChannelDiscover;\n"],"names":["ChannelHeaderContainer","styled","Box","content","useParams","id","AppBar","className","position","Toolbar","Typography","variant","component","channelList2","ChannelLeftDrawBarContainer","ScrollbarColor","useSWR","fetcher","data","channelList","useState","selectedIndex","setSelectedIndex","channelSearchInputValue","setChannelSearchInputValue","handleListItemClick","useCallback","event","index","onChangeChannelSearchInput","e","target","value","indexOf","filter","channel","regex","RegExp","name","match","getChannelList","inputValue","autoComplete","onChange","to","List","ListItemButton","selected","onClick","Flare","ListItemText","primary","autoHide","renderThumbVertical","style","props","map","channelMode","type","key","secondary","Button","ProtectedRoomModalBack","ProtectedRoomModalContainer","channelPasswordModal","setChannelPasswordModal","channelPasswordRoomNumber","setChannelPasswordRoomNumber","mutateChannelList","mutate","mutateAllChannelList","password","showPassword","PasswordValues","setPasswordValues","passwordError","setPasswordError","history","useHistory","handleClickShowPassword","handleChange","prop","handleMouseDownPassword","preventDefault","onClickModalClose","onSubmitPassword","axios","config","then","response","push","catch","error","message","toast","autoClose","hideProgressBar","closeOnClick","pauseOnHover","theme","IconButton","Close","FormControl","InputLabel","htmlFor","Input","endAdornment","InputAdornment","onMouseDown","VisibilityOff","Visibility","ChannelBodyContainer","ChannelCard","Card","ismobile","ChannelName","allChannelList","myChannelList","mutateMyChannelList","isMobile","useMediaQuery","maxWidth","onClickPublicRoom","channelId","code","onClickProtectedRoom","roomNumber","sx","flexGrow","Grid","container","spacing","Channel","flag","forEach","myChannel","item","xs","sm","md","CardActionArea","CardContent","color","authId","Lock","ChannelDiscoverContainer","ChannelLeftDrawBar","ChannelHeader"],"sourceRoot":""}