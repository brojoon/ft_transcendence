{"version":3,"file":"670.js","mappings":"wKAEaA,E,QAAYC,EAAAA,IAAH,I,EAAA,gL,kBAAA,E,slCCatB,IAAMC,GAAkBC,EAAAA,EAAAA,KAAS,kBAAM,8GACjCC,GAAcD,EAAAA,EAAAA,KAAS,kBAAM,yIAC7BE,GAAgBF,EAAAA,EAAAA,KAAS,kBAAM,uHAoFrC,EAlFgB,YACWG,EAAAA,EAAAA,IAAqB,aAAcC,EAAAA,GAApDC,KAAR,IACA,GAA2DF,EAAAA,EAAAA,IACzD,8BACAC,EAAAA,GAFYE,EAAd,EAAQD,KAA6BE,EAArC,EAA6BC,OAKvBC,GAAUC,EAAAA,EAAAA,MAChB,KAAwBC,EAAAA,EAAAA,UAAS,IAAjC,GAAOC,EAAP,KAAaC,EAAb,KACA,KAAoCF,EAAAA,EAAAA,UAAS,KAA7C,GAAOG,EAAP,KAAmBC,EAAnB,KACA,KAAsCJ,EAAAA,EAAAA,UAAS,GAA/C,GAAOK,EAAP,KAAoBC,EAApB,KACA,KAA4CN,EAAAA,EAAAA,UAAS,CACnDO,SAAU,GACVC,cAAc,IAFhB,GAAOC,EAAP,KAAuBC,EAAvB,KAKMC,GAAwBC,EAAAA,EAAAA,cAAY,WACxCC,IAAAA,KAAA,+BAE4BZ,EAF5B,YAEoCE,GAChC,CACEI,SAAUE,EAAeF,UAE3BO,EAAAA,GAEDC,MAAK,SAACC,GACLd,EAAQ,IACRE,EAAc,KACdM,EAAkB,CAChBH,SAAU,GACVC,cAAc,IAEhBS,EAAAA,GAAAA,QAAc,iCAAkC,CAC9CC,UAAW,IACXC,SAAUF,EAAAA,GAAAA,SAAAA,UACVG,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,MAAO,YAET3B,IAAoBmB,MAAK,WACnBpB,GACFG,EAAQ0B,KAAR,oBAA0BR,EAAStB,aAIxC+B,OAAM,SAACC,GACNpB,EAAe,GACfJ,EAAQ,IACRE,EAAc,KACdM,EAAkB,CAChBH,SAAU,GACVC,cAAc,SAGnB,CAACP,EAAME,EAAYR,EAAec,IAErC,OACE,gBAACvB,EAAD,KACE,gBAAC,KAAD,KACE,gBAAC,KAAD,CAAOyC,OAAK,EAACC,KAAK,YAAYC,UAAWzC,IACzC,gBAAC,KAAD,CACEuC,OAAK,EACLC,KAAK,mBACLE,OAAQ,kBACN,gBAACvC,EAAD,CACEoB,sBAAuBA,EACvBV,KAAMA,EACNG,cAAeA,EACfF,QAASA,EACTQ,kBAAmBA,EACnBL,YAAaA,EACbC,eAAgBA,OAItB,gBAAC,KAAD,CAAOqB,OAAK,EAACC,KAAK,gBAAgBC,UAAWvC","sources":["webpack://brojoon/./pages/Channels/style.ts","webpack://brojoon/./pages/Channels/index.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n\theight: 100vh;\n\tdisplay: flex;\n\twidth: 100%;\n\tborder-left: 1px solid #4f4f4f;\n\tmargin: 0;\n\tpadding: 0;\n\tbackground-color: #1e1e1e;\n\toverflow: hidden;\n\n`;","import React, { useState, useCallback, useEffect } from 'react';\nimport { Container } from './style';\nimport { Route, Switch, useHistory } from 'react-router-dom';\nimport Grid from '@mui/material/Grid';\nimport useSWR from 'swr';\nimport { IChannelList, IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport axios from 'axios';\nimport config from '@utils/config';\nimport { toast } from 'react-toastify';\nimport loadable from '@loadable/component';\n\n// import ChannelDiscover from '@pages/ChannelDiscover';\n// import ChannelRoom from '@pages/ChannelRoom';\n// import ChannelCreate from '@pages/ChannelCreate';\nconst ChannelDiscover = loadable(() => import('@pages/ChannelDiscover'));\nconst ChannelRoom = loadable(() => import('@pages/ChannelRoom'));\nconst ChannelCreate = loadable(() => import('@pages/ChannelCreate'));\n\nconst Channel = () => {\n  const { data: myData } = useSWR<IUser | null>('/api/users', fetcher);\n  const { data: mychannelList, mutate: mutateChannelList } = useSWR<IChannelList[]>(\n    '/api/channels/myChannelList',\n    fetcher,\n  );\n\n  const history = useHistory();\n  const [name, setName] = useState('');\n  const [visibility, setVisibility] = useState('0');\n  const [createError, setCreateError] = useState(0);\n  const [PasswordValues, setPasswordValues] = useState({\n    password: '',\n    showPassword: false,\n  });\n\n  const onSubmitChannelCreate = useCallback(() => {\n    axios\n      .post(\n        `/api/channels/create/${name}/${visibility}`,\n        {\n          password: PasswordValues.password,\n        },\n        config,\n      )\n      .then((response) => {\n        setName('');\n        setVisibility('0');\n        setPasswordValues({\n          password: '',\n          showPassword: false,\n        });\n        toast.success('Successfully created a channel', {\n          autoClose: 4000,\n          position: toast.POSITION.TOP_RIGHT,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          theme: 'colored',\n        });\n        mutateChannelList().then(() => {\n          if (mychannelList) {\n            history.push(`/channels/${response.data}`);\n          }\n        });\n      })\n      .catch((error) => {\n        setCreateError(1);\n        setName('');\n        setVisibility('0');\n        setPasswordValues({\n          password: '',\n          showPassword: false,\n        });\n      });\n  }, [name, visibility, mychannelList, PasswordValues]);\n\n  return (\n    <Container>\n      <Switch>\n        <Route exact path=\"/channels\" component={ChannelDiscover} />\n        <Route\n          exact\n          path=\"/channels/create\"\n          render={() => (\n            <ChannelCreate\n              onSubmitChannelCreate={onSubmitChannelCreate}\n              name={name}\n              setVisibility={setVisibility}\n              setName={setName}\n              setPasswordValues={setPasswordValues}\n              createError={createError}\n              setCreateError={setCreateError}\n            />\n          )}\n        />\n        <Route exact path=\"/channels/:id\" component={ChannelRoom} />\n      </Switch>\n    </Container>\n  );\n};\n\nexport default Channel;\n"],"names":["Container","styled","ChannelDiscover","loadable","ChannelRoom","ChannelCreate","useSWR","fetcher","data","mychannelList","mutateChannelList","mutate","history","useHistory","useState","name","setName","visibility","setVisibility","createError","setCreateError","password","showPassword","PasswordValues","setPasswordValues","onSubmitChannelCreate","useCallback","axios","config","then","response","toast","autoClose","position","hideProgressBar","closeOnClick","pauseOnHover","theme","push","catch","error","exact","path","component","render"],"sourceRoot":""}